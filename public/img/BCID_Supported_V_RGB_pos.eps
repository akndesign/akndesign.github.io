%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: BCID_Supported_V_RGB_pos.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: Jones, Calvin GCPE:EX
%%CreationDate: 2016-02-09
%%BoundingBox: 0 0 674 612
%%HiResBoundingBox: 0 0 673.9444 611.3458
%%CropBox: 0 0 673.9444 611.3458
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">BCID_V_solid_PMS_pos [Converted]</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2016-02-09T11:56:07-08:00</xmp:CreateDate>
         <xmp:ModifyDate>2016-02-09T11:56:07-08:00</xmp:ModifyDate>
         <xmp:MetadataDate>2016-02-09T11:56:07-08:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>232</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA6AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:7fef58fc-29ef-4043-aad3-b7adfebe116d</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:7fef58fc-29ef-4043-aad3-b7adfebe116d</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:343B392AF294DA11828BDDC8DF0FDE31</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:038011740720681180839DF5225F05E4</stRef:instanceID>
            <stRef:documentID>xmp.did:038011740720681180839DF5225F05E4</stRef:documentID>
            <stRef:originalDocumentID>uuid:343B392AF294DA11828BDDC8DF0FDE31</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:163782C9122068118C1480B0D7E125E6</stEvt:instanceID>
                  <stEvt:when>2011-04-27T16:32:14-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118C14EF354DC477F5</stEvt:instanceID>
                  <stEvt:when>2011-04-28T09:03:09-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118C14A890F11F50F9</stEvt:instanceID>
                  <stEvt:when>2012-03-23T11:13:30-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0380117407206811808385A6F301FF67</stEvt:instanceID>
                  <stEvt:when>2013-08-16T10:51:06-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0480117407206811808385A6F301FF67</stEvt:instanceID>
                  <stEvt:when>2013-08-16T10:59:25-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:588283A018206811808385A6F301FF67</stEvt:instanceID>
                  <stEvt:when>2013-08-16T11:27:14-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:038011740720681180839DF5225F05E4</stEvt:instanceID>
                  <stEvt:when>2015-03-09T09:00:17-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7fef58fc-29ef-4043-aad3-b7adfebe116d</stEvt:instanceID>
                  <stEvt:when>2016-02-09T11:56:07-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>9.360337</stDim:w>
            <stDim:h>8.490912</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>BC ID Gold</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>227</xmpG:red>
                           <xmpG:green>168</xmpG:green>
                           <xmpG:blue>43</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>BC ID Blue</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -611.346 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 611.346 li
673.944 611.346 li
673.944 0 li
cp
clp
219.119 321.1 mo
219.119 323.71 219.283 327.389 220.802 328.98 cv
222.326 330.638 224.736 331.007 227.142 331.007 cv
234.274 331.007 239.731 328.116 239.731 320.888 cv
239.731 315.181 236.524 308.533 223.775 308.533 cv
219.439 308.533 219.119 308.971 219.119 310.412 cv
219.119 321.1 li
cp
219.119 304.344 mo
219.119 306.366 219.197 306.512 223.29 306.366 cv
231.469 306.08 235.879 303.905 235.879 297.117 cv
235.879 290.037 230.029 287.368 223.931 287.368 cv
222.169 287.368 220.967 287.51 220.239 287.8 cv
219.439 288.017 219.119 288.375 219.119 289.678 cv
219.119 304.344 li
cp
212.545 294.733 mo
212.545 289.388 212.225 288.017 208.615 287.727 cv
206.05 287.51 li
205.404 287.073 205.486 285.991 206.127 285.706 cv
210.463 285.342 215.917 285.126 223.368 285.126 cv
228.423 285.126 233.235 285.486 236.845 287.151 cv
240.293 288.664 242.938 291.556 242.938 296.179 cv
242.938 301.38 239.571 304.054 234.763 306.08 cv
234.763 306.799 235.399 307.019 236.282 307.163 cv
240.609 307.884 247.032 311.497 247.032 319.227 cv
247.032 327.609 240.133 333.244 225.692 333.244 cv
223.368 333.244 219.439 333.027 216.072 333.027 cv
212.545 333.027 209.815 333.17 206.85 333.244 cv
206.37 333.027 206.21 331.872 206.69 331.44 cv
208.131 331.218 li
212.381 330.57 212.545 329.773 212.545 322.186 cv
212.545 294.733 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.137255 .25098 .458824 rgb
f
302.766 301.847 mo
302.766 295.304 302.632 294.256 298.59 293.95 cv
296.876 293.823 li
296.464 293.582 296.599 292.465 297.015 292.278 cv
300.438 292.404 302.766 292.465 305.644 292.465 cv
308.383 292.465 310.716 292.404 314.138 292.278 cv
314.55 292.465 314.684 293.582 314.273 293.823 cv
312.564 293.95 li
308.522 294.256 308.383 295.304 308.383 301.847 cv
308.383 323.819 li
308.383 330.358 308.522 331.222 312.564 331.655 cv
314.273 331.837 li
314.684 332.083 314.55 333.195 314.138 333.383 cv
310.716 333.256 308.383 333.195 305.644 333.195 cv
302.766 333.195 300.438 333.256 297.015 333.383 cv
296.599 333.195 296.464 332.213 296.876 331.837 cv
298.59 331.655 li
302.632 331.222 302.766 330.358 302.766 323.819 cv
302.766 301.847 li
cp
f
340.772 323.939 mo
340.772 330.417 340.897 331.344 344.618 331.655 cv
346.678 331.837 li
347.058 332.083 346.933 333.195 346.547 333.383 cv
342.89 333.256 340.706 333.195 338.145 333.195 cv
335.573 333.195 333.328 333.256 329.216 333.383 cv
328.836 333.195 328.705 332.149 329.216 331.837 cv
331.531 331.655 li
335.188 331.344 335.513 330.417 335.513 323.939 cv
335.513 296.351 li
335.513 294.439 335.513 294.382 333.582 294.382 cv
330.051 294.382 li
327.294 294.382 323.764 294.504 322.157 295.922 cv
320.618 297.281 319.977 298.636 319.267 300.181 cv
318.756 300.548 317.86 300.241 317.597 299.748 cv
318.626 296.974 319.591 293.02 320.037 290.553 cv
320.229 290.431 321.063 290.366 321.257 290.553 cv
321.643 292.527 323.764 292.465 326.714 292.465 cv
352.706 292.465 li
356.173 292.465 356.752 292.344 357.713 290.738 cv
358.037 290.618 358.743 290.678 358.868 290.92 cv
358.163 293.45 357.713 298.454 357.908 300.302 cv
357.648 300.8 356.558 300.8 356.241 300.428 cv
356.046 298.883 355.597 296.603 354.636 295.922 cv
353.161 294.872 350.72 294.382 347.188 294.382 cv
342.63 294.382 li
340.706 294.382 340.772 294.439 340.772 296.477 cv
340.772 323.939 li
cp
f
368.276 301.847 mo
368.276 295.304 368.143 294.256 364.099 293.95 cv
362.387 293.823 li
361.979 293.582 362.113 292.465 362.524 292.278 cv
365.947 292.404 368.276 292.465 371.158 292.465 cv
373.898 292.465 376.226 292.404 379.648 292.278 cv
380.06 292.465 380.199 293.582 379.787 293.823 cv
378.073 293.95 li
374.032 294.256 373.898 295.304 373.898 301.847 cv
373.898 323.819 li
373.898 330.358 374.032 331.222 378.073 331.655 cv
379.787 331.837 li
380.199 332.083 380.06 333.195 379.648 333.383 cv
376.226 333.256 373.898 333.195 371.158 333.195 cv
368.276 333.195 365.947 333.256 362.524 333.383 cv
362.113 333.195 361.979 332.213 362.387 331.837 cv
364.099 331.655 li
368.143 331.222 368.276 330.358 368.276 323.819 cv
368.276 301.847 li
cp
f
398.972 334.014 mo
392.86 334.014 389.002 332.408 387.615 331.733 cv
386.742 330.375 385.794 325.991 385.648 323.092 cv
386.016 322.658 387.107 322.538 387.395 322.905 cv
388.485 326.056 391.476 332.097 399.919 332.097 cv
406.039 332.097 409.024 328.703 409.024 325.004 cv
409.024 322.291 408.37 319.265 403.052 316.362 cv
396.138 312.536 li
392.496 310.499 388.273 306.984 388.273 301.921 cv
388.273 296.062 393.656 291.309 403.126 291.309 cv
405.381 291.309 408.004 291.677 409.898 292.111 cv
410.841 292.357 411.863 292.479 412.442 292.479 cv
413.105 293.962 413.759 297.421 413.759 300.012 cv
413.465 300.381 412.301 300.566 411.936 300.198 cv
410.993 297.234 409.024 293.218 402.031 293.218 cv
394.899 293.218 393.367 297.234 393.367 300.073 cv
393.367 303.652 396.864 306.244 399.557 307.662 cv
405.381 310.748 li
409.968 313.155 414.486 316.735 414.486 322.598 cv
414.486 329.383 408.444 334.014 398.972 334.014 cv
cp
f
435.63 313.263 mo
432.441 313.263 432.307 313.385 432.307 315.236 cv
432.307 323.939 li
432.307 330.417 432.64 331.288 436.358 331.655 cv
438.282 331.837 li
438.682 332.083 438.55 333.195 438.152 333.383 cv
434.566 333.256 432.307 333.195 429.72 333.195 cv
426.863 333.195 424.604 333.323 422.015 333.383 cv
421.613 333.195 421.483 332.213 421.881 331.837 cv
423.007 331.655 li
426.733 331.036 426.863 330.417 426.863 323.939 cv
426.863 301.722 li
426.863 295.244 426.395 294.195 422.941 293.95 cv
421.22 293.823 li
420.821 293.582 420.951 292.465 421.35 292.278 cv
424.604 292.344 426.863 292.465 429.72 292.465 cv
432.307 292.465 434.566 292.404 437.422 292.278 cv
437.819 292.465 437.949 293.582 437.557 293.823 cv
436.292 293.95 li
432.441 294.318 432.307 295.244 432.307 301.722 cv
432.307 308.819 li
432.307 310.732 432.441 310.792 435.63 310.792 cv
454.619 310.792 li
457.811 310.792 457.939 310.732 457.939 308.819 cv
457.939 301.722 li
457.939 295.244 457.811 294.318 453.888 293.95 cv
452.629 293.823 li
452.232 293.582 452.365 292.465 452.763 292.278 cv
455.818 292.404 458.072 292.465 460.795 292.465 cv
463.383 292.465 465.648 292.404 468.633 292.278 cv
469.031 292.465 469.164 293.582 468.766 293.823 cv
467.372 293.95 li
463.521 294.318 463.383 295.244 463.383 301.722 cv
463.383 323.939 li
463.383 330.417 463.521 331.222 467.372 331.655 cv
468.966 331.837 li
469.364 332.083 469.23 333.195 468.832 333.383 cv
465.648 333.256 463.383 333.195 460.795 333.195 cv
458.072 333.195 455.685 333.256 452.763 333.383 cv
452.365 333.195 452.232 332.213 452.629 331.837 cv
453.888 331.655 li
457.939 331.036 457.939 330.417 457.939 323.939 cv
457.939 315.236 li
457.939 313.385 457.811 313.263 454.619 313.263 cv
435.63 313.263 li
cp
f
174.536 346.941 mo
179.997 342.695 186.948 340.609 194.724 340.609 cv
198.762 340.609 204.448 341.428 207.962 342.396 cv
208.858 342.621 209.382 342.768 210.057 342.695 cv
210.13 344.409 210.503 349.104 211.1 353.648 cv
210.728 354.167 209.607 354.241 209.079 353.8 cv
207.962 348.731 204.595 342.92 193.755 342.92 cv
182.314 342.92 172.594 350.148 172.594 365.565 cv
172.594 381.215 182.538 389.861 194.798 389.861 cv
204.448 389.861 208.707 383.599 210.429 379.202 cv
210.948 378.83 212.073 378.981 212.372 379.5 cv
211.849 383.378 209.909 388.294 208.785 389.71 cv
207.889 389.861 206.989 390.155 206.166 390.454 cv
204.522 391.05 199.134 392.167 194.352 392.167 cv
187.623 392.167 181.188 390.826 175.735 387.178 cv
169.754 383.079 165.115 376.299 165.115 366.687 cv
165.115 358.416 168.855 351.336 174.536 346.941 cv
cp
f
254.501 372.337 mo
254.501 362.156 249.771 351.174 237.402 351.174 cv
230.656 351.174 221.915 355.551 221.915 369.07 cv
221.915 378.203 226.58 390.051 239.342 390.051 cv
247.114 390.051 254.501 384.494 254.501 372.337 cv
cp
215.431 371.045 mo
215.431 358.702 225.151 349.26 238.502 349.26 cv
253.47 349.26 260.979 359.563 260.979 370.425 cv
260.979 382.894 251.004 391.964 238.502 391.964 cv
224.112 391.964 215.431 382.148 215.431 371.045 cv
cp
f
334.088 365.736 mo
334.088 361.908 333.954 354.811 332.847 352.959 cv
332.388 352.22 331.207 351.787 329.58 351.662 cv
327.939 351.54 li
327.545 351.109 327.675 350.307 328.074 350.062 cv
330.553 350.187 332.976 350.245 335.525 350.245 cv
338.273 350.245 340.043 350.187 342.398 350.062 cv
342.921 350.367 342.853 351.174 342.527 351.54 cv
340.957 351.662 li
339.321 351.787 338.074 352.341 337.685 353.146 cv
336.773 355.181 336.773 362.279 336.773 365.736 cv
336.773 372.71 li
336.773 378.078 335.855 383.754 332.193 387.46 cv
329.38 390.359 324.538 391.964 319.7 391.964 cv
315.182 391.964 310.673 391.163 307.461 388.573 cv
303.995 385.858 302.363 381.349 302.363 374.005 cv
302.363 359.438 li
302.363 353.021 302.234 351.973 298.434 351.662 cv
296.803 351.54 li
296.409 351.295 296.543 350.245 296.928 350.062 cv
300.204 350.187 302.423 350.245 305.047 350.245 cv
307.73 350.245 309.884 350.187 313.087 350.062 cv
313.48 350.245 313.615 351.295 313.221 351.54 cv
311.65 351.662 li
307.855 351.973 307.73 353.021 307.73 359.438 cv
307.73 372.772 li
307.73 382.709 310.997 389.252 321.006 389.252 cv
330.488 389.252 334.088 382.215 334.088 372.837 cv
334.088 365.736 li
cp
f
415.932 380.791 mo
415.932 383.015 416.069 386.165 417.434 387.521 cv
418.791 388.939 420.939 389.252 423.09 389.252 cv
429.459 389.252 434.327 386.78 434.327 380.609 cv
434.327 375.736 431.458 370.058 420.082 370.058 cv
416.217 370.058 415.932 370.425 415.932 371.659 cv
415.932 380.791 li
cp
415.932 366.474 mo
415.932 368.206 416.001 368.327 419.649 368.206 cv
426.955 367.954 430.892 366.107 430.892 360.303 cv
430.892 354.253 425.664 351.973 420.224 351.973 cv
418.648 351.973 417.575 352.094 416.931 352.341 cv
416.217 352.533 415.932 352.838 415.932 353.947 cv
415.932 366.474 li
cp
410.058 358.27 mo
410.058 353.704 409.773 352.533 406.554 352.28 cv
404.26 352.094 li
403.684 351.727 403.758 350.8 404.33 350.555 cv
408.193 350.245 413.061 350.062 419.723 350.062 cv
424.232 350.062 428.528 350.367 431.747 351.787 cv
434.829 353.085 437.188 355.551 437.188 359.502 cv
437.188 363.944 434.181 366.233 429.887 367.954 cv
429.887 368.573 430.459 368.759 431.251 368.887 cv
435.115 369.5 440.845 372.585 440.845 379.19 cv
440.845 386.348 434.683 391.163 421.795 391.163 cv
419.723 391.163 416.217 390.978 413.209 390.978 cv
410.058 390.978 407.627 391.099 404.979 391.163 cv
404.545 390.978 404.402 389.987 404.831 389.618 cv
406.121 389.436 li
409.916 388.878 410.058 388.199 410.058 381.721 cv
410.058 358.27 li
cp
f
267.328 311.562 mo
266.086 311.562 263.597 312.026 263.597 310.372 cv
263.597 298.536 li
263.597 293.905 263.745 293.243 269.306 293.243 cv
275.809 293.243 279.838 296.549 279.838 302.63 cv
279.838 305.279 278.887 307.723 276.468 309.377 cv
273.689 311.3 270.694 311.562 267.328 311.562 cv
cp
292.297 331.841 mo
290.583 331.69 li
290.237 331.655 289.931 331.612 289.635 331.564 cv
287.135 331.118 286.127 328.891 284.949 326.817 cv
279.025 316.5 li
278 314.781 276.905 312.462 274.563 312.133 cv
280.63 311.405 286.123 307.905 286.123 301.891 cv
286.123 294.945 279.241 291.834 272.295 291.834 cv
268.128 291.834 264.033 292.101 259.789 292.101 cv
257.448 292.101 254.96 291.834 252.622 291.834 cv
251.319 291.834 251.307 292.101 251.307 292.828 cv
251.307 293.902 251.757 293.624 253.134 293.624 cv
258.249 293.624 257.885 294.875 257.885 299.107 cv
257.885 326.155 li
257.885 330.024 258.222 331.182 254.154 331.547 cv
254.154 331.547 253.537 331.612 253.185 331.652 cv
251.463 331.824 li
251.052 332.197 251.186 333.184 251.597 333.369 cv
252.519 333.334 254.137 333.269 254.137 333.269 cv
256.387 333.204 258.638 333.031 260.884 333.031 cv
263.147 333.031 265.311 333.208 267.54 333.269 cv
267.54 333.274 li
268.327 333.3 269.158 333.327 270.076 333.361 cv
270.487 333.17 270.625 332.184 270.214 331.815 cv
268.479 331.652 li
268.124 331.616 267.518 331.564 267.518 331.564 cv
263.415 331.283 263.667 330.124 263.667 326.155 cv
263.667 315.973 li
263.667 315.375 263.597 313.79 264.033 313.323 cv
264.398 312.93 265.055 312.995 265.64 312.995 cv
271.201 312.995 271.123 313.528 273.759 318.153 cv
280.924 331.05 li
281.509 332.041 281.945 333.3 283.409 333.3 cv
289.635 333.3 li
290.423 333.323 291.25 333.347 292.155 333.383 cv
292.57 333.2 292.705 332.213 292.297 331.841 cv
cp
f
268.678 359.65 mo
268.678 353.168 268.535 352.18 264.263 351.873 cv
262.563 351.748 li
262.156 351.502 262.29 350.395 262.702 350.207 cv
266.501 350.328 268.808 350.395 271.521 350.395 cv
274.169 350.395 276.476 350.328 279.873 350.207 cv
280.279 350.395 280.414 351.502 280.012 351.748 cv
278.38 351.873 li
274.378 352.18 274.239 353.168 274.239 359.65 cv
274.239 381.128 li
274.239 385.014 274.442 386.619 275.668 387.793 cv
276.411 388.466 277.701 389.211 283.061 389.211 cv
288.836 389.211 290.264 388.966 291.346 388.411 cv
292.705 387.667 294.47 385.448 295.825 382.302 cv
296.236 381.992 297.525 382.236 297.525 382.668 cv
297.525 383.348 295.621 389.646 294.673 391.311 cv
291.208 391.185 284.759 391.124 277.77 391.124 cv
271.521 391.124 li
268.678 391.124 266.501 391.185 262.702 391.311 cv
262.29 391.124 262.156 390.139 262.563 389.77 cv
264.601 389.578 li
268.535 389.211 268.678 388.346 268.678 381.868 cv
268.678 359.65 li
cp
f
450.524 359.771 mo
450.524 353.232 450.393 352.18 446.462 351.873 cv
444.796 351.748 li
444.398 351.502 444.528 350.395 444.93 350.207 cv
448.262 350.328 450.524 350.395 453.326 350.395 cv
455.992 350.395 458.258 350.328 461.591 350.207 cv
461.987 350.395 462.128 351.502 461.722 351.748 cv
460.061 351.873 li
456.13 352.18 455.992 353.232 455.992 359.771 cv
455.992 381.747 li
455.992 388.286 456.13 389.151 460.061 389.578 cv
461.722 389.77 li
462.128 390.012 461.987 391.124 461.591 391.311 cv
458.258 391.185 455.992 391.124 453.326 391.124 cv
450.524 391.124 448.262 391.185 444.93 391.311 cv
444.528 391.124 444.398 390.139 444.796 389.77 cv
446.462 389.578 li
450.393 389.151 450.524 388.286 450.524 381.747 cv
450.524 359.771 li
cp
f
397.267 389.567 mo
396.925 389.53 396.284 389.48 396.284 389.48 cv
395.587 389.408 394.951 389.307 394.458 388.762 cv
393.592 387.844 393.661 385.227 393.661 384.18 cv
393.661 357.14 li
393.661 355.959 393.376 353.406 394.238 352.487 cv
394.671 352.002 395.574 351.926 396.371 351.877 cv
396.371 351.873 li
396.859 351.839 396.869 351.839 397.297 351.813 cv
399.011 351.692 li
399.422 351.445 399.282 350.337 398.876 350.153 cv
397.959 350.182 397.127 350.169 396.335 350.194 cv
396.335 350.199 li
389.054 350.199 li
388.266 350.199 387.539 350.199 387.109 351.046 cv
372.271 381.955 li
359.168 352.094 li
358.73 351.046 358.661 350.199 357.288 350.199 cv
349.711 350.199 li
348.923 350.173 348.049 350.182 347.137 350.153 cv
346.725 350.337 346.591 351.445 346.997 351.692 cv
348.711 351.813 li
349.063 351.843 349.702 351.891 349.702 351.891 cv
352.545 352.073 352.723 352.705 352.464 355.695 cv
350.234 384.701 li
350.041 387.616 349.88 389.155 346.829 389.436 cv
346.829 389.436 346.184 389.514 345.833 389.554 cv
344.115 389.74 li
343.705 390.109 343.843 391.099 344.25 391.281 cv
345.158 391.25 346.765 391.202 346.765 391.202 cv
348.304 391.124 349.88 390.99 351.46 390.99 cv
353.161 390.99 354.857 391.152 356.558 391.216 cv
356.558 391.221 li
357.348 391.245 358.185 391.272 359.099 391.305 cv
359.509 391.124 359.643 390.133 359.235 389.766 cv
357.523 389.578 li
357.071 389.54 356.566 389.492 356.566 389.492 cv
352.164 389.19 352.264 386.082 352.537 382.28 cv
354.627 355.306 li
355.133 355.306 li
369.319 388.502 li
369.463 388.961 369.681 389.744 370.401 389.744 cv
371.05 389.744 371.267 389.026 371.48 388.568 cv
387.469 354.519 li
387.975 354.519 li
387.975 384.18 li
387.975 385.36 388.114 387.78 386.894 388.697 cv
386.253 389.173 384.173 389.458 384.173 389.458 cv
383.88 389.506 383.582 389.544 383.244 389.578 cv
381.531 389.77 li
381.12 390.139 381.254 391.124 381.669 391.311 cv
382.57 391.277 384.173 391.225 384.173 391.225 cv
386.49 391.163 388.849 390.99 391.213 390.99 cv
392.907 390.99 396.236 391.152 396.236 391.152 cv
397.024 391.176 397.929 391.258 398.842 391.294 cv
399.257 391.107 399.391 390.121 398.976 389.752 cv
397.267 389.567 li
cp
f
490.582 374.46 mo
482.561 374.46 li
482.285 374.46 480.058 374.724 480.058 374.066 cv
480.058 373.869 480.19 373.481 480.266 373.283 cv
485.072 361.374 li
485.214 361.048 485.704 359.412 486.259 359.412 cv
486.674 359.412 487.232 361.112 487.375 361.374 cv
492.109 372.499 li
492.109 372.629 492.599 373.676 492.599 373.94 cv
492.599 374.658 490.997 374.46 490.582 374.46 cv
cp
508.57 389.736 mo
508.337 389.549 li
507.996 389.51 507.688 389.471 507.403 389.424 cv
504.736 388.831 503.697 385.616 502.711 383.323 cv
488.975 350.818 li
488.838 350.432 488.569 349.589 488.023 349.589 cv
487.275 349.589 487.071 350.493 486.867 351.013 cv
473.747 383.457 li
473.271 384.686 472.047 387.662 471.162 388.573 cv
470.489 389.264 469.602 389.399 468.662 389.492 cv
468.662 389.492 467.923 389.563 467.567 389.601 cv
465.958 389.77 li
465.543 390.139 465.686 391.124 466.091 391.311 cv
467.009 391.277 468.633 391.216 468.633 391.216 cv
470.424 391.194 472.224 390.964 474.021 390.964 cv
475.53 390.964 477.04 391.124 478.551 391.194 cv
478.551 391.194 480.174 391.254 481.091 391.285 cv
481.503 391.099 481.637 390.112 481.225 389.744 cv
479.517 389.558 li
479.174 389.524 478.581 389.466 478.581 389.466 cv
477.006 389.294 475.038 389.013 475.038 387.278 cv
475.038 386.109 475.578 384.751 475.989 383.711 cv
478.027 378.857 li
479.049 376.528 478.646 376.269 481.363 376.269 cv
490.607 376.269 li
493.875 376.269 493.398 376.269 494.822 379.57 cv
496.999 384.491 li
497.341 385.33 497.946 386.758 497.946 387.662 cv
497.946 389.289 496.173 389.399 494.516 389.54 cv
494.516 389.54 493.966 389.584 493.488 389.623 cv
491.837 389.74 li
491.43 390.109 491.564 391.099 491.975 391.285 cv
492.893 391.25 494.516 391.185 494.516 391.185 cv
496.444 391.116 498.393 390.964 500.263 390.964 cv
502.643 390.964 505.026 391.129 507.407 391.194 cv
507.407 391.194 li
508.186 391.216 507.529 391.241 508.432 391.277 cv
508.843 391.09 508.982 390.104 508.57 389.736 cv
cp
f
469 408.577 mo
206.348 408.577 li
206.348 411.68 li
469 411.68 li
469 408.577 li
cp
.890196 .658824 .168627 rgb
f
466.94 199.37 mo
450.713 136.894 394.221 98.0842 337.422 98.0842 cv
277.87 98.0842 222.027 137.82 206.582 203.079 cv
204.426 212.189 203.341 222.333 203.341 232.052 cv
203.341 240.682 204.223 247.943 205.772 256.117 cv
205.772 256.117 205.772 256.117 205.772 256.122 cv
206.963 255.866 207.452 255.745 208.775 255.481 cv
208.775 255.477 208.772 255.473 208.767 255.469 cv
220.919 253.383 240.155 250.877 256.596 252.949 cv
282.708 256.252 299.031 260.65 326.598 266.88 cv
354.164 273.112 374.474 278.976 404.22 275.679 cv
430.259 272.792 448.089 268.733 465.446 257.308 cv
465.446 257.303 465.446 257.299 465.451 257.296 cv
465.469 257.286 466.849 256.392 466.849 256.392 cv
467.149 256.183 468.33 255.295 468.705 255.024 cv
469.979 247.58 470.935 240.171 470.935 232.363 cv
470.935 232.363 li
470.935 221.419 469.394 209.558 466.94 199.37 cv
1 1 1 rgb
f
206.521 203.426 mo
205.4 208.732 203.345 218.71 203.345 232.052 cv
203.345 240.682 204.232 247.943 205.781 256.117 cv
205.781 256.117 205.781 256.117 205.781 256.122 cv
206.972 255.866 207.46 255.75 208.785 255.481 cv
208.785 255.481 208.785 255.473 208.775 255.469 cv
220.928 253.383 240.168 250.877 256.605 252.949 cv
282.716 256.252 299.04 260.65 326.606 266.88 cv
354.174 273.112 374.487 278.976 404.225 275.679 cv
430.269 272.792 448.098 268.733 465.455 257.308 cv
465.459 257.303 465.459 257.299 465.465 257.296 cv
465.482 257.286 466.857 256.392 466.857 256.392 cv
467.156 256.183 468.342 255.295 468.718 255.024 cv
469.99 247.58 470.947 240.171 470.947 232.363 cv
470.947 232.363 li
470.947 221.891 469.536 210.574 467.26 200.695 cv
448.833 190.421 li
427.516 205.368 li
413.179 199.777 li
408.323 202.24 378.381 222.26 378.381 222.26 cv
366.883 213.942 li
354.554 211.5 li
338.114 199.526 li
319.25 212.479 li
319.25 212.479 298.213 224.695 297.486 224.695 cv
296.754 224.695 272.092 205.144 272.092 205.144 cv
260.728 193.169 li
258.797 194.394 251.065 197.938 251.065 197.938 cv
250.667 198.046 li
243.189 195.732 li
234.109 190.91 li
206.521 203.426 li
cp
.137255 .25098 .458824 rgb
f
445.96 190.149 mo
418.887 200.162 li
427.435 203.079 li
445.96 190.149 li
cp
.890196 .658824 .168627 rgb
f
230.054 190.495 mo
214.856 184.891 li
215.03 184.428 215.202 183.96 215.383 183.497 cv
232.088 189.34 li
233.694 188.335 li
241.678 192.676 li
251.601 196.289 li
252.194 196.026 li
216.786 180.095 li
216.985 179.629 217.193 179.161 217.4 178.699 cv
256.404 194.277 li
256.958 193.991 li
218.941 175.327 li
219.154 174.885 219.369 174.44 219.586 173.993 cv
260.875 192.005 li
221.274 170.666 li
221.49 170.259 221.707 169.853 221.923 169.449 cv
277.537 198.882 li
278.336 197.402 279.185 195.952 280.085 194.537 cv
234.767 159.133 li
283.132 190.161 li
284.322 188.586 285.586 187.063 286.91 185.601 cv
240.384 143.434 li
240.717 143.065 241.063 142.701 241.401 142.337 cv
275.204 172.211 li
243.946 139.681 li
244.301 139.318 244.655 138.958 245.019 138.604 cv
280.284 172.453 li
247.693 136.029 li
248.053 135.695 248.412 135.358 248.775 135.025 cv
280.358 167.231 li
251.566 132.535 li
251.917 132.233 252.267 131.94 252.622 131.645 cv
293.033 179.612 li
294.591 178.265 296.209 176.98 297.889 175.778 cv
269.063 125.859 li
302.35 172.838 li
304.155 171.752 306.016 170.757 307.916 169.839 cv
280.656 113.487 li
281.132 113.261 281.608 113.045 282.08 112.824 cv
302.269 153.252 li
285.443 111.323 li
285.91 111.119 286.373 110.92 286.845 110.725 cv
306.886 155.381 li
290.294 109.353 li
290.753 109.176 291.211 108.999 291.665 108.829 cv
308.911 150.569 li
295.201 107.578 li
295.607 107.445 296.01 107.32 296.418 107.186 cv
315.852 166.616 li
317.657 166.014 319.492 165.478 321.361 165.027 cv
313.334 107.95 li
326.598 163.976 li
328.801 163.621 331.05 163.387 333.318 163.253 cv
329.168 100.997 li
329.64 100.971 330.107 100.941 330.579 100.914 cv
334.872 145.671 li
334.24 100.793 li
334.755 100.785 335.271 100.777 335.785 100.772 cv
337.619 147.894 li
339.463 100.789 li
339.962 100.803 340.46 100.811 340.957 100.824 cv
340.554 145.671 li
344.664 100.992 li
345.128 101.019 345.591 101.048 346.056 101.079 cv
341.826 163.279 li
343.982 163.418 346.12 163.647 348.213 163.985 cv
361.439 108.137 li
353.436 165.031 li
355.401 165.507 357.324 166.074 359.214 166.72 cv
378.577 107.528 li
379.034 107.683 379.487 107.843 379.943 108.003 cv
366.372 150.569 li
383.423 109.271 li
383.89 109.449 384.357 109.618 384.825 109.804 cv
368.394 155.381 li
388.222 111.201 li
388.697 111.405 389.165 111.613 389.637 111.82 cv
373.016 153.252 li
392.948 113.335 li
393.376 113.538 393.796 113.738 394.221 113.945 cv
367.121 169.965 li
368.964 170.865 370.77 171.835 372.513 172.891 cv
405.706 126.045 li
376.957 175.824 li
378.685 177.063 380.338 178.386 381.935 179.771 cv
421.994 132.22 li
422.361 132.531 422.727 132.852 423.094 133.172 cv
394.601 167.507 li
425.837 135.652 li
426.205 135.993 426.581 136.336 426.945 136.682 cv
394.671 172.73 li
429.559 139.24 li
429.926 139.603 430.282 139.975 430.64 140.342 cv
399.755 172.488 li
433.143 142.984 li
433.454 143.324 433.77 143.67 434.08 144.012 cv
388.01 185.76 li
389.311 187.214 390.564 188.72 391.74 190.283 cv
440.005 159.32 li
394.765 194.658 li
395.67 196.074 396.514 197.531 397.311 199.016 cv
452.269 169.93 li
452.495 170.36 452.728 170.787 452.954 171.22 cv
414.031 192.188 li
454.603 174.5 li
454.822 174.95 455.03 175.408 455.246 175.868 cv
412.145 197.055 li
456.752 179.187 li
456.96 179.663 457.178 180.14 457.376 180.615 cv
416.947 198.735 li
458.73 183.965 li
458.899 184.398 459.06 184.83 459.229 185.263 cv
450.288 188.552 li
463.556 198.644 li
467.233 200.695 li
467.233 200.699 467.233 200.699 467.233 200.703 cv
467.238 200.703 li
465.836 195.095 463.703 188.244 461.621 182.943 cv
441.694 132.424 391.446 97.9807 336.967 97.9807 cv
273.126 97.9807 219.768 142.822 206.647 202.72 cv
206.638 202.72 li
206.629 202.777 206.547 203.136 206.491 203.46 cv
209.105 202.24 li
230.054 190.495 li
cp
f
205.539 460.684 mo
201.999 460.684 199.766 459.568 198.965 459.095 cv
198.46 458.149 197.912 455.1 197.827 453.081 cv
198.038 452.78 198.67 452.695 198.839 452.952 cv
199.471 455.143 201.198 459.352 206.086 459.352 cv
209.626 459.352 211.354 456.991 211.354 454.413 cv
211.354 452.523 210.975 450.418 207.899 448.4 cv
203.895 445.737 li
201.789 444.32 199.344 441.871 199.344 438.349 cv
199.344 434.269 202.462 430.962 207.94 430.962 cv
209.247 430.962 210.764 431.219 211.859 431.52 cv
212.407 431.692 212.997 431.778 213.334 431.778 cv
213.713 432.808 214.093 435.213 214.093 437.018 cv
213.924 437.276 213.25 437.405 213.039 437.146 cv
212.491 435.084 211.354 432.292 207.308 432.292 cv
203.179 432.292 202.294 435.084 202.294 437.061 cv
202.294 439.551 204.316 441.356 205.876 442.343 cv
209.247 444.491 li
211.901 446.166 214.514 448.658 214.514 452.737 cv
214.514 457.462 211.017 460.684 205.539 460.684 cv
cp
.137255 .25098 .458824 rgb
f
222.392 453.683 mo
222.392 456.647 223.108 458.621 226.311 458.621 cv
227.449 458.621 228.797 458.149 229.725 457.333 cv
230.272 456.819 230.567 456.174 230.567 454.842 cv
230.567 447.798 li
230.567 445.007 230.272 444.92 229.008 444.405 cv
228.46 444.191 li
228.165 444.019 228.165 443.417 228.503 443.245 cv
230.188 443.202 232.505 442.902 233.433 442.472 cv
233.643 442.515 233.77 442.602 233.812 442.774 cv
233.728 443.588 233.685 444.92 233.685 446.509 cv
233.685 453.726 li
233.685 457.118 233.812 458.408 234.992 458.408 cv
235.497 458.408 236.045 458.32 236.635 458.193 cv
236.888 458.408 236.93 459.267 236.593 459.438 cv
234.949 459.781 232.505 460.211 231.073 461.028 cv
230.862 461.028 230.651 460.898 230.567 460.726 cv
230.567 458.965 li
230.567 458.579 230.44 458.365 230.188 458.365 cv
228.924 459.18 226.859 460.598 224.373 460.598 cv
220.665 460.598 219.274 458.708 219.274 455.229 cv
219.274 448.056 li
219.274 445.351 219.274 444.963 218.01 444.405 cv
217.504 444.191 li
217.252 443.976 217.294 443.374 217.589 443.245 cv
219.527 443.202 221.17 442.816 222.098 442.472 cv
222.35 442.515 222.477 442.602 222.519 442.774 cv
222.435 443.503 222.392 444.405 222.392 446.509 cv
222.392 453.683 li
cp
f
243.964 455.658 mo
243.964 457.033 244.386 457.548 245.229 458.236 cv
246.071 458.88 247.378 459.18 248.263 459.18 cv
251.718 459.18 253.741 455.916 253.741 451.449 cv
253.741 448.013 251.844 444.534 248.052 444.534 cv
246.24 444.534 244.934 445.221 244.47 445.737 cv
244.091 446.209 243.964 446.853 243.964 448.271 cv
243.964 455.658 li
cp
240.846 447.669 mo
240.846 445.994 240.846 445.78 239.709 445.007 cv
239.33 444.748 li
239.161 444.576 239.161 444.104 239.372 443.976 cv
240.467 443.503 242.448 442.472 243.543 441.655 cv
243.796 441.655 243.964 441.742 244.049 441.957 cv
243.964 442.73 243.88 443.374 243.88 443.932 cv
243.88 444.233 243.964 444.491 244.259 444.491 cv
244.807 444.233 247.462 442.472 250.159 442.472 cv
254.415 442.472 257.153 445.994 257.153 450.332 cv
257.153 456.303 252.856 460.598 246.872 460.598 cv
246.114 460.598 244.934 460.512 244.555 460.426 cv
244.175 460.512 243.964 460.726 243.964 461.628 cv
243.964 466.138 li
243.964 469.188 244.049 469.574 245.565 469.789 cv
247.209 470.004 li
247.504 470.219 247.42 470.948 247.125 471.077 cv
245.102 470.991 243.88 470.948 242.405 470.948 cv
240.889 470.948 239.624 470.991 238.444 471.077 cv
238.149 470.948 238.065 470.219 238.36 470.004 cv
239.245 469.875 li
240.804 469.66 240.846 469.231 240.846 466.138 cv
240.846 447.669 li
cp
f
265.325 455.658 mo
265.325 457.033 265.747 457.548 266.59 458.236 cv
267.433 458.88 268.739 459.18 269.624 459.18 cv
273.079 459.18 275.102 455.916 275.102 451.449 cv
275.102 448.013 273.205 444.534 269.413 444.534 cv
267.601 444.534 266.295 445.221 265.831 445.737 cv
265.452 446.209 265.325 446.853 265.325 448.271 cv
265.325 455.658 li
cp
262.207 447.669 mo
262.207 445.994 262.207 445.78 261.069 445.007 cv
260.69 444.748 li
260.522 444.576 260.522 444.104 260.732 443.976 cv
261.828 443.503 263.809 442.472 264.904 441.655 cv
265.157 441.655 265.325 441.742 265.41 441.957 cv
265.325 442.73 265.241 443.374 265.241 443.932 cv
265.241 444.233 265.325 444.491 265.621 444.491 cv
266.168 444.233 268.823 442.472 271.52 442.472 cv
275.776 442.472 278.515 445.994 278.515 450.332 cv
278.515 456.303 274.217 460.598 268.233 460.598 cv
267.475 460.598 266.295 460.512 265.915 460.426 cv
265.536 460.512 265.325 460.726 265.325 461.628 cv
265.325 466.138 li
265.325 469.188 265.41 469.574 266.927 469.789 cv
268.57 470.004 li
268.865 470.219 268.781 470.948 268.486 471.077 cv
266.463 470.991 265.241 470.948 263.766 470.948 cv
262.25 470.948 260.985 470.991 259.806 471.077 cv
259.51 470.948 259.426 470.219 259.721 470.004 cv
260.606 469.875 li
262.165 469.66 262.207 469.231 262.207 466.138 cv
262.207 447.669 li
cp
f
289.932 443.76 mo
287.15 443.76 285.086 446.467 285.086 451.191 cv
285.086 455.1 286.814 459.309 290.522 459.309 cv
294.23 459.309 295.368 455.358 295.368 452.05 cv
295.368 448.4 293.935 443.76 289.932 443.76 cv
cp
298.992 451.362 mo
298.992 456.732 295.368 460.598 290.1 460.598 cv
285.254 460.598 281.462 457.118 281.462 451.749 cv
281.462 446.337 285.465 442.472 290.438 442.472 cv
295.156 442.472 298.992 446.08 298.992 451.362 cv
cp
f
304.593 447.669 mo
304.593 445.994 304.593 445.78 303.456 445.007 cv
303.076 444.748 li
302.908 444.576 302.908 444.104 303.119 443.976 cv
304.087 443.632 306.321 442.515 307.375 441.871 cv
307.586 441.914 307.711 441.999 307.711 442.171 cv
307.711 444.663 li
307.711 444.878 307.753 445.007 307.837 445.049 cv
309.313 443.804 310.914 442.472 312.473 442.472 cv
313.527 442.472 314.369 443.159 314.369 444.191 cv
314.369 445.608 313.232 446.166 312.557 446.166 cv
312.136 446.166 311.925 446.037 311.63 445.866 cv
310.998 445.436 310.367 445.179 309.777 445.179 cv
309.102 445.179 308.596 445.565 308.259 446.037 cv
307.837 446.639 307.711 447.884 307.711 449.345 cv
307.711 455.186 li
307.711 458.279 307.795 458.793 309.397 458.923 cv
310.914 459.052 li
311.208 459.267 311.125 459.996 310.83 460.125 cv
308.849 460.039 307.626 459.996 306.152 459.996 cv
304.635 459.996 303.371 460.039 302.276 460.125 cv
301.98 459.996 301.896 459.267 302.191 459.052 cv
302.992 458.923 li
304.551 458.664 304.593 458.279 304.593 455.186 cv
304.593 447.669 li
cp
f
322.373 444.878 mo
321.657 444.878 321.615 445.007 321.615 445.908 cv
321.615 453.94 li
321.615 456.431 321.91 458.708 324.691 458.708 cv
325.113 458.708 325.492 458.621 325.829 458.492 cv
326.208 458.365 326.755 457.892 326.882 457.892 cv
327.219 457.892 327.388 458.365 327.303 458.621 cv
326.544 459.524 325.028 460.598 322.878 460.598 cv
319.255 460.598 318.498 458.536 318.498 455.959 cv
318.498 446.123 li
318.498 444.963 318.455 444.878 317.611 444.878 cv
316.432 444.878 li
316.179 444.706 316.136 444.233 316.305 443.976 cv
317.527 443.588 318.582 443.03 319.001 442.644 cv
319.55 442.128 320.351 440.969 320.772 440.11 cv
320.982 440.025 321.488 440.025 321.657 440.325 cv
321.657 442.258 li
321.657 443.03 321.699 443.073 322.415 443.073 cv
327.093 443.073 li
327.599 443.46 327.514 444.619 327.134 444.878 cv
322.373 444.878 li
cp
f
335.813 447.712 mo
338.932 447.712 339.859 447.54 340.197 447.283 cv
340.322 447.197 340.449 447.025 340.449 446.467 cv
340.449 445.264 339.648 443.76 337.203 443.76 cv
334.718 443.76 332.569 446.08 332.527 447.497 cv
332.527 447.583 332.527 447.712 332.822 447.712 cv
335.813 447.712 li
cp
333.201 449.001 mo
332.106 449.001 332.064 449.086 332.064 450.16 cv
332.064 454.498 334.55 458.193 339.059 458.193 cv
340.449 458.193 341.629 457.763 342.936 456.088 cv
343.357 455.959 343.652 456.216 343.693 456.603 cv
342.303 459.524 339.27 460.598 337.078 460.598 cv
334.339 460.598 332.19 459.396 330.968 457.763 cv
329.704 456.088 329.198 454.07 329.198 452.179 cv
329.198 446.896 332.611 442.472 337.668 442.472 cv
341.291 442.472 343.652 445.007 343.652 447.583 cv
343.652 448.185 343.568 448.529 343.482 448.7 cv
343.357 448.957 342.766 449.001 340.998 449.001 cv
333.201 449.001 li
cp
f
359.156 447.283 mo
359.156 446.424 358.988 446.037 358.691 445.608 cv
358.061 444.706 356.797 443.804 355.152 443.804 cv
351.318 443.804 349.338 447.197 349.338 450.934 cv
349.338 454.842 351.488 458.536 355.615 458.536 cv
356.756 458.536 358.188 458.021 358.861 457.333 cv
359.115 457.075 359.156 456.431 359.156 455.744 cv
359.156 447.283 li
cp
362.275 453.726 mo
362.275 457.118 362.316 458.708 363.496 458.708 cv
363.959 458.708 364.678 458.492 365.307 458.279 cv
365.604 458.365 365.645 459.438 365.266 459.653 cv
363.496 459.911 360.885 460.555 359.703 461.028 cv
359.451 461.028 359.24 460.898 359.24 460.684 cv
359.24 459.953 li
359.24 459.309 359.24 458.793 359.156 458.621 cv
358.988 458.621 li
357.135 459.911 355.701 460.598 353.678 460.598 cv
349 460.598 345.883 456.861 345.883 452.351 cv
345.883 446.337 350.35 442.472 356.08 442.472 cv
357.514 442.472 358.441 442.687 358.904 442.859 cv
359.115 442.859 359.156 442.602 359.156 442.258 cv
359.156 435.772 li
359.156 433.237 359.115 432.98 357.85 432.207 cv
357.43 431.948 li
357.217 431.82 357.217 431.219 357.43 431.09 cv
358.482 430.746 360.461 430.103 361.98 429.286 cv
362.148 429.286 362.316 429.372 362.4 429.543 cv
362.359 430.832 362.275 432.98 362.275 434.869 cv
362.275 453.726 li
cp
f
382.664 454.155 mo
382.664 455.658 383.002 456.991 383.719 457.892 cv
384.436 458.793 385.574 459.309 386.922 459.309 cv
390.883 459.309 392.441 455.873 392.441 452.179 cv
392.441 447.755 390.207 444.32 386.037 444.32 cv
384.772 444.32 383.762 444.619 383.172 445.007 cv
382.75 445.307 382.664 445.78 382.664 447.455 cv
382.664 454.155 li
cp
379.547 435.772 mo
379.547 433.237 379.504 432.98 378.242 432.207 cv
377.818 431.948 li
377.609 431.82 377.609 431.219 377.818 431.09 cv
378.789 430.703 380.811 430.146 382.414 429.286 cv
382.58 429.286 382.75 429.372 382.834 429.543 cv
382.75 431.047 382.664 432.98 382.664 434.869 cv
382.664 442.987 li
382.664 443.718 382.834 443.89 383.088 443.89 cv
384.184 443.245 385.869 442.472 387.934 442.472 cv
392.736 442.472 395.98 446.166 395.98 450.891 cv
395.98 456.603 391.936 460.598 386.289 460.598 cv
384.729 460.598 383.551 460.297 382.709 460.039 cv
381.822 459.74 381.273 459.481 380.938 459.481 cv
380.6 459.481 380.262 459.824 380.053 460.125 cv
380.012 460.168 379.969 460.168 379.883 460.168 cv
379.717 460.168 379.547 460.082 379.463 459.911 cv
379.504 459.309 379.547 458.492 379.547 456.259 cv
379.547 435.772 li
cp
f
398.213 468.844 mo
398.213 467.684 398.971 467.126 399.898 467.126 cv
400.697 467.126 li
401.373 467.126 401.795 466.825 402.088 466.354 cv
403.311 464.421 404.154 462.616 404.533 461.585 cv
404.66 461.241 404.955 460.34 404.955 459.74 cv
404.955 458.88 404.785 458.365 404.238 456.775 cv
400.951 447.583 li
400.234 445.565 399.94 444.534 398.465 444.233 cv
397.412 444.019 li
397.158 443.804 397.201 443.073 397.537 442.945 cv
398.887 443.03 400.15 443.073 401.541 443.073 cv
402.68 443.073 403.859 443.03 405.207 442.945 cv
405.543 443.073 405.588 443.804 405.293 444.019 cv
404.238 444.233 li
403.648 444.362 403.311 444.491 403.311 444.791 cv
403.311 445.307 404.281 448.099 404.533 448.829 cv
405.881 452.78 li
406.135 453.467 406.934 455.744 407.104 455.83 cv
407.23 455.744 407.904 454.413 408.662 452.652 cv
410.096 449.258 li
411.022 447.025 411.57 445.436 411.57 444.963 cv
411.57 444.663 411.318 444.362 410.559 444.233 cv
409.252 444.019 li
408.957 443.804 409 443.073 409.336 442.945 cv
410.686 443.03 411.949 443.073 413.045 443.073 cv
414.098 443.073 415.068 443.03 416.248 442.945 cv
416.584 443.116 416.627 443.76 416.33 444.019 cv
415.615 444.148 li
414.225 444.405 413.467 445.651 412.033 448.7 cv
409.674 453.639 li
408.283 456.518 404.828 463.991 402.764 468.672 cv
402.047 470.304 401.035 470.692 400.068 470.692 cv
398.844 470.692 398.213 469.918 398.213 468.844 cv
cp
f
433.773 444.878 mo
433.059 444.878 433.016 445.007 433.016 445.908 cv
433.016 453.94 li
433.016 456.431 433.309 458.708 436.09 458.708 cv
436.514 458.708 436.893 458.621 437.229 458.492 cv
437.609 458.365 438.154 457.892 438.283 457.892 cv
438.619 457.892 438.787 458.365 438.703 458.621 cv
437.945 459.524 436.428 460.598 434.279 460.598 cv
430.656 460.598 429.898 458.536 429.898 455.959 cv
429.898 446.123 li
429.898 444.963 429.854 444.878 429.012 444.878 cv
427.832 444.878 li
427.58 444.706 427.537 444.233 427.705 443.976 cv
428.928 443.588 429.982 443.03 430.402 442.644 cv
430.951 442.128 431.752 440.969 432.172 440.11 cv
432.383 440.025 432.889 440.025 433.059 440.325 cv
433.059 442.258 li
433.059 443.03 433.1 443.073 433.816 443.073 cv
438.492 443.073 li
438.998 443.46 438.916 444.619 438.537 444.878 cv
433.773 444.878 li
cp
f
442.832 435.772 mo
442.832 433.237 442.791 432.98 441.525 432.207 cv
441.105 431.948 li
440.893 431.82 440.893 431.219 441.105 431.09 cv
442.158 430.746 444.139 430.103 445.654 429.286 cv
445.824 429.286 445.992 429.372 446.076 429.543 cv
446.035 430.832 445.951 432.98 445.951 434.869 cv
445.951 443.89 li
445.951 444.276 445.992 444.619 446.117 444.706 cv
447.637 443.503 449.66 442.472 451.809 442.472 cv
455.811 442.472 457.242 445.007 457.242 448.013 cv
457.242 455.186 li
457.242 458.279 457.328 458.751 458.844 458.923 cv
459.982 459.052 li
460.277 459.267 460.193 459.996 459.898 460.125 cv
458.381 460.039 457.158 459.996 455.684 459.996 cv
454.168 459.996 452.902 460.039 451.766 460.125 cv
451.471 459.996 451.387 459.267 451.68 459.052 cv
452.523 458.923 li
454.082 458.664 454.125 458.279 454.125 455.186 cv
454.125 449.044 li
454.125 446.295 452.82 444.448 450.123 444.448 cv
448.69 444.448 447.594 444.963 446.834 445.608 cv
446.076 446.252 445.951 446.467 445.951 447.97 cv
445.951 455.186 li
445.951 458.279 446.035 458.708 447.553 458.923 cv
448.436 459.052 li
448.732 459.224 448.648 459.996 448.352 460.125 cv
447.088 460.039 445.867 459.996 444.391 459.996 cv
442.875 459.996 441.609 460.039 440.26 460.125 cv
439.967 459.996 439.881 459.267 440.178 459.052 cv
441.23 458.923 li
442.791 458.751 442.832 458.279 442.832 455.186 cv
442.832 435.772 li
cp
f
468.912 447.712 mo
472.031 447.712 472.959 447.54 473.295 447.283 cv
473.422 447.197 473.547 447.025 473.547 446.467 cv
473.547 445.264 472.746 443.76 470.303 443.76 cv
467.816 443.76 465.668 446.08 465.627 447.497 cv
465.627 447.583 465.627 447.712 465.92 447.712 cv
468.912 447.712 li
cp
466.301 449.001 mo
465.203 449.001 465.162 449.086 465.162 450.16 cv
465.162 454.498 467.648 458.193 472.156 458.193 cv
473.547 458.193 474.729 457.763 476.035 456.088 cv
476.455 455.959 476.752 456.216 476.793 456.603 cv
475.402 459.524 472.367 460.598 470.178 460.598 cv
467.438 460.598 465.289 459.396 464.066 457.763 cv
462.803 456.088 462.297 454.07 462.297 452.179 cv
462.297 446.896 465.711 442.472 470.766 442.472 cv
474.391 442.472 476.752 445.007 476.752 447.583 cv
476.752 448.185 476.666 448.529 476.582 448.7 cv
476.455 448.957 475.865 449.001 474.096 449.001 cv
466.301 449.001 li
cp
f
107.093 503.651 mo
107.093 508.074 107.177 508.621 109.874 508.916 cv
111.011 509.043 li
111.264 509.254 111.179 509.97 110.927 510.096 cv
108.525 510.012 107.135 509.97 105.45 509.97 cv
103.68 509.97 102.164 510.012 100.31 510.096 cv
100.057 509.97 99.9732 509.296 100.226 509.043 cv
101.11 508.916 li
103.554 508.579 103.638 508.074 103.638 503.651 cv
103.638 488.105 li
103.638 484.524 103.554 483.808 101.658 483.597 cv
100.142 483.428 li
99.8467 483.176 99.8887 482.543 100.226 482.375 cv
102.459 482.08 105.071 482.038 108.567 482.038 cv
112.064 482.038 114.676 482.501 116.656 483.723 cv
118.594 484.945 120.026 487.136 120.026 490.042 cv
120.026 493.918 117.625 495.857 115.814 496.741 cv
113.96 497.626 111.727 498.005 110 498.005 cv
109.705 497.879 109.705 497.247 109.958 497.162 cv
114.508 496.32 116.151 493.75 116.151 490.085 cv
116.151 485.998 113.749 483.344 109.368 483.344 cv
107.135 483.344 107.093 483.513 107.093 484.861 cv
107.093 503.651 li
cp
f
124.242 497.879 mo
124.242 496.236 124.242 496.025 123.104 495.267 cv
122.725 495.014 li
122.556 494.846 122.556 494.382 122.767 494.256 cv
123.736 493.918 125.969 492.823 127.022 492.192 cv
127.233 492.234 127.359 492.318 127.359 492.487 cv
127.359 494.93 li
127.359 495.141 127.401 495.267 127.485 495.309 cv
128.96 494.087 130.561 492.781 132.12 492.781 cv
133.173 492.781 134.016 493.455 134.016 494.466 cv
134.016 495.857 132.878 496.405 132.204 496.405 cv
131.783 496.405 131.572 496.278 131.277 496.11 cv
130.645 495.688 130.013 495.435 129.423 495.435 cv
128.75 495.435 128.244 495.815 127.907 496.278 cv
127.485 496.867 127.359 498.089 127.359 499.522 cv
127.359 505.251 li
127.359 508.284 127.443 508.79 129.044 508.916 cv
130.561 509.043 li
130.856 509.254 130.772 509.97 130.477 510.096 cv
128.497 510.012 127.275 509.97 125.8 509.97 cv
124.284 509.97 123.02 510.012 121.924 510.096 cv
121.629 509.97 121.545 509.254 121.84 509.043 cv
122.641 508.916 li
124.199 508.664 124.242 508.284 124.242 505.251 cv
124.242 497.879 li
cp
f
143.791 494.045 mo
141.01 494.045 138.946 496.699 138.946 501.333 cv
138.946 505.167 140.673 509.296 144.38 509.296 cv
148.088 509.296 149.226 505.42 149.226 502.176 cv
149.226 498.595 147.793 494.045 143.791 494.045 cv
cp
152.849 501.502 mo
152.849 506.768 149.226 510.56 143.959 510.56 cv
139.114 510.56 135.323 507.148 135.323 501.881 cv
135.323 496.573 139.325 492.781 144.296 492.781 cv
149.015 492.781 152.849 496.32 152.849 501.502 cv
cp
f
157.106 497.542 mo
156.474 495.983 156.094 494.635 154.578 494.424 cv
153.735 494.298 li
153.482 493.961 153.524 493.371 153.861 493.244 cv
154.915 493.328 156.389 493.371 157.822 493.371 cv
158.959 493.371 159.802 493.328 161.234 493.244 cv
161.529 493.413 161.571 494.087 161.276 494.298 cv
160.771 494.382 li
159.465 494.593 159.423 494.803 159.844 496.068 cv
160.813 498.974 162.035 501.923 163.003 504.113 cv
163.383 504.956 163.551 505.336 163.678 505.462 cv
163.846 505.336 164.141 504.746 164.478 503.862 cv
165.026 502.429 166.458 498.764 166.879 497.668 cv
167.469 496.194 167.638 495.309 167.638 495.056 cv
167.638 494.677 167.385 494.508 166.879 494.424 cv
165.911 494.298 li
165.658 494.003 165.7 493.413 165.995 493.244 cv
167.301 493.328 168.354 493.371 169.154 493.371 cv
170.208 493.371 170.924 493.328 172.104 493.244 cv
172.399 493.413 172.44 494.045 172.188 494.298 cv
171.556 494.382 li
170.082 494.593 169.702 495.688 168.481 498.047 cv
167.891 499.185 165.279 505.293 164.605 507.021 cv
164.183 508.074 163.762 509.043 163.214 510.476 cv
163.13 510.602 162.961 510.644 162.793 510.644 cv
162.583 510.644 162.372 510.602 162.245 510.476 cv
161.908 509.296 161.276 507.653 160.645 506.094 cv
157.106 497.542 li
cp
f
179.479 485.872 mo
179.479 487.389 178.425 488.063 177.245 488.063 cv
175.94 488.063 175.097 487.094 175.097 485.956 cv
175.097 484.566 176.107 483.681 177.372 483.681 cv
178.636 483.681 179.479 484.693 179.479 485.872 cv
cp
175.982 497.879 mo
175.982 496.236 175.982 496.025 174.844 495.267 cv
174.465 495.014 li
174.296 494.846 174.296 494.382 174.507 494.256 cv
175.476 493.918 177.878 492.823 178.847 492.192 cv
179.057 492.192 179.226 492.276 179.268 492.444 cv
179.184 493.918 179.099 495.941 179.099 497.668 cv
179.099 505.251 li
179.099 508.284 179.184 508.706 180.7 508.916 cv
181.585 509.043 li
181.88 509.254 181.795 509.97 181.501 510.096 cv
180.237 510.012 179.015 509.97 177.54 509.97 cv
176.024 509.97 174.76 510.012 173.58 510.096 cv
173.285 509.97 173.201 509.254 173.496 509.043 cv
174.381 508.916 li
175.94 508.706 175.982 508.284 175.982 505.251 cv
175.982 497.879 li
cp
f
186.81 497.879 mo
186.81 496.236 186.81 496.025 185.672 495.267 cv
185.293 495.014 li
185.124 494.846 185.124 494.382 185.335 494.256 cv
186.304 493.918 188.705 492.823 189.548 492.192 cv
189.716 492.192 189.927 492.276 190.011 492.487 cv
189.927 493.455 189.927 494.087 189.927 494.466 cv
189.927 494.719 190.095 494.93 190.39 494.93 cv
192.16 493.834 194.14 492.781 196.289 492.781 cv
199.785 492.781 201.218 495.183 201.218 498.005 cv
201.218 505.251 li
201.218 508.284 201.302 508.706 202.818 508.916 cv
203.746 509.043 li
204.041 509.254 203.956 509.97 203.661 510.096 cv
202.398 510.012 201.175 509.97 199.701 509.97 cv
198.184 509.97 196.92 510.012 195.783 510.096 cv
195.488 509.97 195.404 509.254 195.699 509.043 cv
196.499 508.916 li
198.058 508.664 198.1 508.284 198.1 505.251 cv
198.1 498.974 li
198.1 496.573 197.005 494.803 194.14 494.803 cv
192.539 494.803 191.149 495.478 190.559 496.278 cv
190.011 496.994 189.927 497.584 189.927 498.806 cv
189.927 505.251 li
189.927 508.284 190.011 508.664 191.528 508.916 cv
192.286 509.043 li
192.581 509.254 192.497 509.97 192.202 510.096 cv
191.065 510.012 189.843 509.97 188.368 509.97 cv
186.852 509.97 185.587 510.012 184.408 510.096 cv
184.113 509.97 184.029 509.254 184.324 509.043 cv
185.209 508.916 li
186.767 508.706 186.81 508.284 186.81 505.251 cv
186.81 497.879 li
cp
f
220.262 493.497 mo
220.599 493.792 220.894 494.466 220.894 495.183 cv
220.894 495.941 220.473 496.741 219.967 496.741 cv
219.757 496.741 219.546 496.658 219.378 496.447 cv
218.451 495.309 216.892 494.213 215.165 494.213 cv
212.215 494.213 209.351 496.53 209.351 500.996 cv
209.351 504.283 211.626 508.2 216.134 508.2 cv
218.577 508.2 219.841 507.105 220.81 505.673 cv
221.147 505.588 221.526 505.883 221.568 506.263 cv
220.136 509.38 216.976 510.56 214.533 510.56 cv
212.3 510.56 210.235 509.844 208.761 508.411 cv
207.287 506.979 206.317 504.914 206.317 502.176 cv
206.317 497.626 209.519 492.781 216.513 492.781 cv
217.482 492.781 219.125 492.991 220.262 493.497 cv
cp
f
229.743 497.921 mo
232.861 497.921 233.788 497.752 234.125 497.499 cv
234.251 497.415 234.378 497.247 234.378 496.699 cv
234.378 495.52 233.577 494.045 231.133 494.045 cv
228.648 494.045 226.499 496.32 226.457 497.71 cv
226.457 497.794 226.457 497.921 226.752 497.921 cv
229.743 497.921 li
cp
227.131 499.185 mo
226.036 499.185 225.994 499.269 225.994 500.323 cv
225.994 504.577 228.48 508.2 232.987 508.2 cv
234.378 508.2 235.557 507.78 236.863 506.136 cv
237.284 506.01 237.579 506.263 237.622 506.642 cv
236.231 509.506 233.198 510.56 231.007 510.56 cv
228.269 510.56 226.12 509.38 224.899 507.78 cv
223.634 506.136 223.129 504.156 223.129 502.302 cv
223.129 497.12 226.542 492.781 231.597 492.781 cv
235.22 492.781 237.579 495.267 237.579 497.794 cv
237.579 498.384 237.495 498.721 237.411 498.89 cv
237.284 499.143 236.694 499.185 234.925 499.185 cv
227.131 499.185 li
cp
f
258.815 494.045 mo
256.035 494.045 253.97 496.699 253.97 501.333 cv
253.97 505.167 255.698 509.296 259.405 509.296 cv
263.112 509.296 264.25 505.42 264.25 502.176 cv
264.25 498.595 262.817 494.045 258.815 494.045 cv
cp
267.873 501.502 mo
267.873 506.768 264.25 510.56 258.984 510.56 cv
254.139 510.56 250.347 507.148 250.347 501.881 cv
250.347 496.573 254.35 492.781 259.321 492.781 cv
264.039 492.781 267.873 496.32 267.873 501.502 cv
cp
f
277.185 495.141 mo
276.469 495.141 276.469 495.225 276.469 496.362 cv
276.469 505.251 li
276.469 508.284 276.553 508.79 278.07 508.916 cv
279.586 509.043 li
279.881 509.254 279.797 509.97 279.503 510.096 cv
277.607 510.012 276.385 509.97 274.91 509.97 cv
273.394 509.97 272.13 510.012 270.866 510.096 cv
270.571 509.97 270.487 509.254 270.782 509.043 cv
271.751 508.916 li
273.309 508.706 273.352 508.284 273.352 505.251 cv
273.352 496.362 li
273.352 495.225 273.352 495.141 272.509 495.141 cv
271.034 495.141 li
270.782 494.972 270.739 494.593 270.908 494.34 cv
272.719 493.455 li
273.057 493.286 273.352 493.033 273.352 492.612 cv
273.352 490.169 273.647 487.557 274.657 485.198 cv
275.711 482.796 278.07 479.847 282.241 479.847 cv
284.474 479.847 286.37 480.859 286.37 482.375 cv
286.37 483.218 285.569 483.892 284.769 483.892 cv
284.305 483.892 284.052 483.723 283.757 483.386 cv
282.957 482.459 281.777 481.533 280.387 481.533 cv
279.081 481.533 278.028 482.333 277.396 483.85 cv
276.638 485.787 276.469 488.863 276.469 490.97 cv
276.469 492.192 li
276.469 493.328 276.469 493.371 277.185 493.371 cv
281.988 493.371 li
282.451 493.792 282.157 494.972 281.693 495.141 cv
277.185 495.141 li
cp
f
300.948 503.019 mo
300.948 504.535 301.033 506.684 301.833 507.611 cv
302.633 508.579 303.898 508.79 305.161 508.79 cv
308.911 508.79 311.775 507.105 311.775 502.892 cv
311.775 499.564 310.09 495.688 303.392 495.688 cv
301.117 495.688 300.948 495.941 300.948 496.783 cv
300.948 503.019 li
cp
300.948 493.244 mo
300.948 494.424 300.99 494.508 303.139 494.424 cv
307.436 494.256 309.753 492.991 309.753 489.031 cv
309.753 484.903 306.678 483.344 303.476 483.344 cv
302.549 483.344 301.918 483.428 301.538 483.597 cv
301.117 483.723 300.948 483.934 300.948 484.693 cv
300.948 493.244 li
cp
297.494 487.641 mo
297.494 484.524 297.325 483.723 295.429 483.555 cv
294.081 483.428 li
293.744 483.176 293.786 482.543 294.124 482.375 cv
296.398 482.164 299.263 482.038 303.181 482.038 cv
305.836 482.038 308.363 482.248 310.259 483.218 cv
312.07 484.103 313.461 485.787 313.461 488.484 cv
313.461 491.517 311.691 493.076 309.164 494.256 cv
309.164 494.677 309.501 494.803 309.964 494.888 cv
312.239 495.309 315.609 497.415 315.609 501.923 cv
315.609 506.81 311.986 510.096 304.403 510.096 cv
303.181 510.096 301.117 509.97 299.347 509.97 cv
297.494 509.97 296.061 510.054 294.503 510.096 cv
294.25 509.97 294.165 509.296 294.418 509.043 cv
295.177 508.916 li
297.409 508.537 297.494 508.074 297.494 503.651 cv
297.494 487.641 li
cp
f
321.216 497.879 mo
321.216 496.236 321.216 496.025 320.078 495.267 cv
319.698 495.014 li
319.53 494.846 319.53 494.382 319.741 494.256 cv
320.71 493.918 322.942 492.823 323.996 492.192 cv
324.207 492.234 324.333 492.318 324.333 492.487 cv
324.333 494.93 li
324.333 495.141 324.375 495.267 324.459 495.309 cv
325.934 494.087 327.535 492.781 329.094 492.781 cv
330.147 492.781 330.989 493.455 330.989 494.466 cv
330.989 495.857 329.852 496.405 329.178 496.405 cv
328.757 496.405 328.546 496.278 328.251 496.11 cv
327.619 495.688 326.987 495.435 326.398 495.435 cv
325.724 495.435 325.218 495.815 324.881 496.278 cv
324.459 496.867 324.333 498.089 324.333 499.522 cv
324.333 505.251 li
324.333 508.284 324.417 508.79 326.019 508.916 cv
327.535 509.043 li
327.83 509.254 327.745 509.97 327.45 510.096 cv
325.471 510.012 324.249 509.97 322.774 509.97 cv
321.258 509.97 319.993 510.012 318.898 510.096 cv
318.604 509.97 318.52 509.254 318.815 509.043 cv
319.614 508.916 li
321.173 508.664 321.216 508.284 321.216 505.251 cv
321.216 497.879 li
cp
f
338.7 485.872 mo
338.7 487.389 337.647 488.063 336.468 488.063 cv
335.161 488.063 334.318 487.094 334.318 485.956 cv
334.318 484.566 335.329 483.681 336.594 483.681 cv
337.857 483.681 338.7 484.693 338.7 485.872 cv
cp
335.203 497.879 mo
335.203 496.236 335.203 496.025 334.065 495.267 cv
333.686 495.014 li
333.518 494.846 333.518 494.382 333.729 494.256 cv
334.697 493.918 337.1 492.823 338.068 492.192 cv
338.279 492.192 338.447 492.276 338.489 492.444 cv
338.405 493.918 338.321 495.941 338.321 497.668 cv
338.321 505.251 li
338.321 508.284 338.405 508.706 339.922 508.916 cv
340.807 509.043 li
341.102 509.254 341.018 509.97 340.723 510.096 cv
339.458 510.012 338.236 509.97 336.762 509.97 cv
335.245 509.97 333.982 510.012 332.802 510.096 cv
332.507 509.97 332.423 509.254 332.718 509.043 cv
333.603 508.916 li
335.161 508.706 335.203 508.284 335.203 505.251 cv
335.203 497.879 li
cp
f
349.485 495.141 mo
348.77 495.141 348.728 495.267 348.728 496.152 cv
348.728 504.03 li
348.728 506.473 349.023 508.706 351.803 508.706 cv
352.224 508.706 352.604 508.621 352.94 508.495 cv
353.319 508.369 353.867 507.905 353.993 507.905 cv
354.33 507.905 354.499 508.369 354.415 508.621 cv
353.656 509.506 352.14 510.56 349.991 510.56 cv
346.368 510.56 345.609 508.537 345.609 506.01 cv
345.609 496.362 li
345.609 495.225 345.567 495.141 344.725 495.141 cv
343.545 495.141 li
343.293 494.972 343.251 494.508 343.419 494.256 cv
344.641 493.876 345.694 493.328 346.115 492.949 cv
346.663 492.444 347.464 491.307 347.885 490.464 cv
348.096 490.38 348.601 490.38 348.77 490.675 cv
348.77 492.57 li
348.77 493.328 348.811 493.371 349.527 493.371 cv
354.204 493.371 li
354.71 493.75 354.625 494.888 354.246 495.141 cv
349.485 495.141 li
cp
f
362.462 485.872 mo
362.462 487.389 361.409 488.063 360.23 488.063 cv
358.924 488.063 358.081 487.094 358.081 485.956 cv
358.081 484.566 359.092 483.681 360.355 483.681 cv
361.62 483.681 362.462 484.693 362.462 485.872 cv
cp
358.966 497.879 mo
358.966 496.236 358.966 496.025 357.828 495.267 cv
357.449 495.014 li
357.28 494.846 357.28 494.382 357.491 494.256 cv
358.46 493.918 360.861 492.823 361.83 492.192 cv
362.041 492.192 362.21 492.276 362.252 492.444 cv
362.167 493.918 362.083 495.941 362.083 497.668 cv
362.083 505.251 li
362.083 508.284 362.167 508.706 363.685 508.916 cv
364.568 509.043 li
364.863 509.254 364.779 509.97 364.484 510.096 cv
363.221 510.012 361.999 509.97 360.524 509.97 cv
359.008 509.97 357.744 510.012 356.565 510.096 cv
356.27 509.97 356.185 509.254 356.48 509.043 cv
357.364 508.916 li
358.924 508.706 358.966 508.284 358.966 505.251 cv
358.966 497.879 li
cp
f
377.209 493.539 mo
377.588 494.466 377.883 495.815 377.883 496.952 cv
377.714 497.247 377.082 497.331 376.871 497.078 cv
376.155 495.225 374.892 494.003 373.164 494.003 cv
371.522 494.003 370.468 495.056 370.468 496.573 cv
370.468 498.3 372.237 499.227 373.712 500.07 cv
375.944 501.333 378.009 502.766 378.009 505.757 cv
378.009 508.959 375.06 510.56 371.942 510.56 cv
369.962 510.56 368.487 510.139 367.435 509.296 cv
367.098 508.495 366.845 506.431 366.929 505.041 cv
367.14 504.788 367.688 504.746 367.898 504.998 cv
368.614 507.316 369.962 509.338 372.363 509.338 cv
373.88 509.338 375.186 508.453 375.186 506.642 cv
375.186 504.703 373.501 503.651 371.942 502.766 cv
369.499 501.375 367.772 499.901 367.772 497.584 cv
367.772 494.508 370.299 492.781 373.501 492.781 cv
375.271 492.781 376.829 493.202 377.209 493.539 cv
cp
f
382.982 486.209 mo
382.982 483.723 382.94 483.471 381.676 482.712 cv
381.255 482.459 li
381.044 482.333 381.044 481.743 381.255 481.616 cv
382.308 481.28 384.288 480.648 385.805 479.847 cv
385.973 479.847 386.142 479.932 386.226 480.1 cv
386.184 481.365 386.1 483.471 386.1 485.324 cv
386.1 494.171 li
386.1 494.551 386.142 494.888 386.268 494.972 cv
387.784 493.792 389.807 492.781 391.955 492.781 cv
395.958 492.781 397.39 495.267 397.39 498.216 cv
397.39 505.251 li
397.39 508.284 397.475 508.748 398.991 508.916 cv
400.129 509.043 li
400.424 509.254 400.339 509.97 400.044 510.096 cv
398.527 510.012 397.306 509.97 395.831 509.97 cv
394.315 509.97 393.051 510.012 391.913 510.096 cv
391.618 509.97 391.534 509.254 391.829 509.043 cv
392.672 508.916 li
394.23 508.664 394.273 508.284 394.273 505.251 cv
394.273 499.227 li
394.273 496.53 392.967 494.719 390.271 494.719 cv
388.838 494.719 387.742 495.225 386.984 495.857 cv
386.226 496.488 386.1 496.699 386.1 498.174 cv
386.1 505.251 li
386.1 508.284 386.184 508.706 387.7 508.916 cv
388.585 509.043 li
388.88 509.211 388.796 509.97 388.501 510.096 cv
387.237 510.012 386.015 509.97 384.541 509.97 cv
383.024 509.97 381.76 510.012 380.412 510.096 cv
380.117 509.97 380.033 509.254 380.328 509.043 cv
381.381 508.916 li
382.94 508.748 382.982 508.284 382.982 505.251 cv
382.982 486.209 li
cp
f
418.669 485.072 mo
421.744 482.67 425.662 481.491 430.044 481.491 cv
432.318 481.491 435.521 481.953 437.501 482.501 cv
438.006 482.628 438.301 482.712 438.681 482.67 cv
438.723 483.639 438.934 486.293 439.271 488.863 cv
439.06 489.158 438.428 489.2 438.133 488.948 cv
437.501 486.082 435.605 482.796 429.496 482.796 cv
423.051 482.796 417.573 486.883 417.573 495.604 cv
417.573 504.451 423.177 509.338 430.086 509.338 cv
435.521 509.338 437.922 505.799 438.891 503.314 cv
439.186 503.103 439.817 503.187 439.986 503.482 cv
439.691 505.673 438.596 508.453 437.964 509.254 cv
437.459 509.338 436.953 509.506 436.489 509.675 cv
435.563 510.012 432.529 510.644 429.833 510.644 cv
426.042 510.644 422.418 509.886 419.343 507.822 cv
415.973 505.504 413.36 501.67 413.36 496.236 cv
413.36 491.56 415.467 487.557 418.669 485.072 cv
cp
f
450.774 494.045 mo
447.994 494.045 445.93 496.699 445.93 501.333 cv
445.93 505.167 447.657 509.296 451.364 509.296 cv
455.072 509.296 456.209 505.42 456.209 502.176 cv
456.209 498.595 454.777 494.045 450.774 494.045 cv
cp
459.832 501.502 mo
459.832 506.768 456.209 510.56 450.943 510.56 cv
446.099 510.56 442.307 507.148 442.307 501.881 cv
442.307 496.573 446.309 492.781 451.28 492.781 cv
455.999 492.781 459.832 496.32 459.832 501.502 cv
cp
f
468.134 505.251 mo
468.134 508.284 468.218 508.706 469.734 508.916 cv
470.745 509.043 li
471.04 509.254 470.956 509.97 470.661 510.096 cv
469.272 510.012 468.05 509.97 466.575 509.97 cv
465.059 509.97 463.794 510.012 462.53 510.096 cv
462.235 509.97 462.151 509.254 462.446 509.043 cv
463.415 508.916 li
464.974 508.706 465.016 508.284 465.016 505.251 cv
465.016 486.209 li
465.016 483.723 464.974 483.471 463.71 482.712 cv
463.289 482.459 li
463.078 482.333 463.078 481.743 463.289 481.616 cv
464.342 481.28 466.322 480.648 467.839 479.847 cv
468.007 479.847 468.176 479.932 468.26 480.1 cv
468.218 481.365 468.134 483.471 468.134 485.324 cv
468.134 505.251 li
cp
f
478.413 503.777 mo
478.413 506.684 479.13 508.621 482.331 508.621 cv
483.469 508.621 484.817 508.158 485.744 507.358 cv
486.292 506.853 486.587 506.22 486.587 504.914 cv
486.587 498.005 li
486.587 495.267 486.292 495.183 485.027 494.677 cv
484.48 494.466 li
484.186 494.298 484.186 493.708 484.523 493.539 cv
486.207 493.497 488.524 493.202 489.451 492.781 cv
489.662 492.823 489.788 492.908 489.83 493.076 cv
489.746 493.876 489.704 495.183 489.704 496.741 cv
489.704 503.819 li
489.704 507.148 489.83 508.411 491.01 508.411 cv
491.516 508.411 492.064 508.327 492.653 508.2 cv
492.906 508.411 492.948 509.254 492.611 509.422 cv
490.968 509.759 488.524 510.181 487.092 510.981 cv
486.882 510.981 486.671 510.855 486.587 510.686 cv
486.587 508.959 li
486.587 508.579 486.46 508.369 486.207 508.369 cv
484.943 509.169 482.879 510.56 480.394 510.56 cv
476.686 510.56 475.296 508.706 475.296 505.293 cv
475.296 498.258 li
475.296 495.604 475.296 495.225 474.032 494.677 cv
473.526 494.466 li
473.273 494.256 473.315 493.666 473.61 493.539 cv
475.549 493.497 477.191 493.118 478.118 492.781 cv
478.371 492.823 478.498 492.908 478.54 493.076 cv
478.456 493.792 478.413 494.677 478.413 496.741 cv
478.413 503.777 li
cp
f
519.744 499.143 mo
519.744 496.278 518.481 494.803 515.826 494.803 cv
514.226 494.803 512.92 495.52 512.33 496.278 cv
511.824 496.909 511.697 497.331 511.697 498.806 cv
511.697 505.251 li
511.697 508.284 511.782 508.706 513.299 508.916 cv
514.184 509.043 li
514.479 509.254 514.394 509.97 514.099 510.096 cv
512.835 510.012 511.613 509.97 510.139 509.97 cv
508.622 509.97 507.484 510.012 506.305 510.096 cv
506.01 509.97 505.926 509.254 506.221 509.043 cv
506.98 508.916 li
508.538 508.664 508.58 508.284 508.58 505.251 cv
508.58 499.143 li
508.58 496.32 507.316 494.803 504.704 494.803 cv
502.977 494.803 501.797 495.562 501.165 496.32 cv
500.744 496.825 500.533 497.373 500.533 498.721 cv
500.533 505.251 li
500.533 508.284 500.617 508.664 502.135 508.916 cv
502.893 509.043 li
503.188 509.254 503.104 509.97 502.809 510.096 cv
501.671 510.012 500.449 509.97 498.975 509.97 cv
497.458 509.97 496.194 510.012 494.888 510.096 cv
494.593 509.97 494.509 509.254 494.804 509.043 cv
495.815 508.916 li
497.374 508.706 497.416 508.284 497.416 505.251 cv
497.416 497.879 li
497.416 496.236 497.416 496.025 496.278 495.267 cv
495.899 495.014 li
495.73 494.846 495.73 494.382 495.941 494.256 cv
496.91 493.918 499.311 492.823 500.154 492.192 cv
500.322 492.192 500.533 492.276 500.617 492.487 cv
500.533 493.455 500.533 494.087 500.533 494.466 cv
500.533 494.719 500.702 494.93 500.997 494.93 cv
502.598 493.792 504.578 492.781 506.6 492.781 cv
508.706 492.781 509.886 493.539 511.065 495.267 cv
511.445 495.351 511.74 495.183 512.119 494.93 cv
513.804 493.75 515.868 492.781 517.849 492.781 cv
521.219 492.781 522.862 495.098 522.862 498.005 cv
522.862 505.251 li
522.862 508.284 522.946 508.706 524.463 508.916 cv
525.474 509.043 li
525.769 509.254 525.685 509.97 525.39 510.096 cv
524 510.012 522.777 509.97 521.304 509.97 cv
519.786 509.97 518.649 510.012 517.47 510.096 cv
517.175 509.97 517.09 509.254 517.385 509.043 cv
518.144 508.916 li
519.702 508.664 519.744 508.284 519.744 505.251 cv
519.744 499.143 li
cp
f
532.724 504.241 mo
532.724 505.715 533.061 507.021 533.776 507.905 cv
534.493 508.79 535.631 509.296 536.979 509.296 cv
540.94 509.296 542.498 505.926 542.498 502.302 cv
542.498 497.963 540.265 494.593 536.094 494.593 cv
534.83 494.593 533.819 494.888 533.229 495.267 cv
532.808 495.562 532.724 496.025 532.724 497.668 cv
532.724 504.241 li
cp
529.607 486.209 mo
529.607 483.723 529.564 483.471 528.3 482.712 cv
527.879 482.459 li
527.668 482.333 527.668 481.743 527.879 481.616 cv
528.848 481.237 530.87 480.69 532.471 479.847 cv
532.64 479.847 532.808 479.932 532.893 480.1 cv
532.808 481.574 532.724 483.471 532.724 485.324 cv
532.724 493.286 li
532.724 494.003 532.893 494.171 533.145 494.171 cv
534.24 493.539 535.926 492.781 537.99 492.781 cv
542.793 492.781 546.037 496.405 546.037 501.038 cv
546.037 506.642 541.992 510.56 536.347 510.56 cv
534.788 510.56 533.608 510.265 532.766 510.012 cv
531.881 509.717 531.333 509.464 530.996 509.464 cv
530.659 509.464 530.322 509.801 530.111 510.096 cv
530.069 510.139 530.027 510.139 529.943 510.139 cv
529.774 510.139 529.607 510.054 529.521 509.886 cv
529.564 509.296 529.607 508.495 529.607 506.305 cv
529.607 486.209 li
cp
f
555.139 485.872 mo
555.139 487.389 554.086 488.063 552.906 488.063 cv
551.6 488.063 550.758 487.094 550.758 485.956 cv
550.758 484.566 551.768 483.681 553.031 483.681 cv
554.297 483.681 555.139 484.693 555.139 485.872 cv
cp
551.643 497.879 mo
551.643 496.236 551.643 496.025 550.504 495.267 cv
550.125 495.014 li
549.957 494.846 549.957 494.382 550.168 494.256 cv
551.137 493.918 553.537 492.823 554.506 492.192 cv
554.717 492.192 554.887 492.276 554.928 492.444 cv
554.844 493.918 554.76 495.941 554.76 497.668 cv
554.76 505.251 li
554.76 508.284 554.844 508.706 556.361 508.916 cv
557.244 509.043 li
557.539 509.254 557.455 509.97 557.16 510.096 cv
555.896 510.012 554.676 509.97 553.201 509.97 cv
551.684 509.97 550.42 510.012 549.24 510.096 cv
548.945 509.97 548.861 509.254 549.156 509.043 cv
550.041 508.916 li
551.6 508.706 551.643 508.284 551.643 505.251 cv
551.643 497.879 li
cp
f
565.715 508.664 mo
566.557 508.664 567.863 508.033 568.284 507.611 cv
568.79 507.105 568.79 506.515 568.832 505.631 cv
568.916 503.145 li
568.916 502.682 568.748 502.597 568.495 502.597 cv
568.242 502.597 567.526 502.766 566.768 503.019 cv
564.282 503.862 563.061 504.493 563.061 506.136 cv
563.061 506.853 563.565 508.664 565.715 508.664 cv
cp
568.326 501.249 mo
568.958 501.038 569.043 500.659 569.043 500.028 cv
569.085 498.089 li
569.127 496.53 568.621 494.424 566.01 494.424 cv
564.83 494.424 563.398 495.014 563.314 496.32 cv
563.271 496.994 563.229 497.499 562.892 497.752 cv
562.26 498.258 561.122 498.553 560.49 498.553 cv
560.111 498.553 559.9 498.342 559.9 497.963 cv
559.9 495.773 564.661 492.781 567.736 492.781 cv
570.77 492.781 572.244 494.551 572.118 497.71 cv
571.865 505.041 li
571.781 506.979 572.16 508.706 573.804 508.706 cv
574.225 508.706 574.604 508.579 574.857 508.453 cv
575.067 508.327 575.278 508.158 575.404 508.158 cv
575.573 508.158 575.699 508.411 575.699 508.706 cv
575.699 508.916 574.225 510.56 572.16 510.56 cv
571.149 510.56 570.138 510.181 569.422 509.254 cv
569.253 509.001 569.001 508.664 568.748 508.664 cv
568.453 508.664 567.947 509.043 567.104 509.506 cv
566.178 510.012 565.251 510.56 564.071 510.56 cv
562.85 510.56 561.839 510.223 561.122 509.591 cv
560.322 508.874 559.816 507.822 559.816 506.642 cv
559.816 504.998 560.617 504.03 563.314 503.061 cv
568.326 501.249 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 19.1.0%%For: (Jones, Calvin GCPE:EX) ()%%Title: (BCID_Supported_V_RGB_pos.eps)%%CreationDate: 2016-02-09 11:56 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6kB?F;dO>%L!;Bk0Qjb0/"!S")@%mt90d_]aU'8ctoDU`$rcP]'&k[i?S\<?1CY&7]e>hf:Y--8[eL"4@He_:1Rot(7n*#DM%j*blm0MhHe&e7&arE)m/1)1Q6E\D=mnmK03C)_2IrIGN)+m?f@Ta5tf'`d]6\)ZM;g`1(YG"h>uRI+`^m@t2[^PA;6b&@QV$m0fV%C:4#l6[CU006JVS(`3gB'hN5@p$hG^EFJ>qO*?[L/ln1fj*F*kd0FRmrotFFJ8]c7#lo[OiQn2`E=IA2P(s/'/O0P+Ql>cW^D#Nq%QcBp5"p3_82h4?6i*UsV*;94N/EtAG0ag$a,d$!!4*VBu@%Kn#HjJ.p^rsQ5cl5$Rc#6YsVChYjo$JRmMuA2F*Z!L)hb*XO7BUj8%iIOB"%/M3O+<k47itHlO=p$7IQJQ#bKnTRo888Q@%XGr&JFl%f8&*Z:I\Yf[-r0cL+TE1).$2=Q8^W41WC(as5CceNOO"[3qZ1#a%a5mDE7mCo3=![II=WD+LiPc'siQ?=1Y+cFJ((.;b,/U)S4NtPWrD$bI)H&B^!'"T&3l:DW+2Sld#Y\WOpbrMI^e5oNm`8+<gI?Va%H!R*T#5HL\!8J:tL)rI[^k4!SKED^;!@8:45PW:^@rQeA:JB@_0F6rs,6S3_WW?_1;N'4;'D;/E5X7iS&+V+/PruIAE3']C5(r/b%BN2,gn,LJnJ%FZj#)<;k@E8L01fNA<*9O7X!Ue`TP1d"sK^?Oa1gl1M@)LN<7R(BIUF5!mj,P/dqEB/[K%>hhKW0;e:Vqb<l3JHm%WU4\,ge>1<$U37(aG1]#%(3'P^k__QRQBm"&$>5BAUP+J?lm]li'Zcp^OpujDn(O[Sb52O(]04,*q8[6"\317=tO@9E&V-_V9haq%BCYMa?%<PA-q//Qd+?a]l>JW%BG.0<.X]/Y@",h_L]8;Qg>r%5V1@'b4B+g8i!Y'eoYX%S)NMYV!oMZh)L*@FPoXPPq!1?%#LnLg%IJF)[8"(7I6Z010I?VLDfV\JJiF+i%01L;2CurXuXLm]*+a*S3Q<HVL9unKUR5I\+Op(!p3^s'p4]m$$Y/njucdICDb&Kuj:mh5V%6T>$OO1)+.Ia,,=n!=sVk[M1KRt'l;jB<R-QCNPHn3dHV27NC>>]"\t`CRJe0\Y&r1SdFf?:MRb"H%a4#TJq^XqF,n\`mQ*XFZ/h%EH**]fs=uQTPaGMS.Bfh)YL(@P6Dd?!.Di<85?(OWhS#al3=ro:8=O"FTi1j#!,\Z!$\K7ZNioJl3;a!J?-s;]<)Sr\hd1;o"/r*%+j%iMSOK\si"<=NJ2IYW3qPZ7cV#3TGO9R,IKHXd_qutbYB-$ggOF(eQ\VNbnc?7?G[)9ced(s8E(rMUFRJ8mfW+#3$2.3G@B@!E%s6C02%h0P`La+'V#_NY]J=$8n$O9#FXq(7OJO"m,Bm[La5S3nR%JV.Y?!PF<O57ReQP]/M#Q44t#QI0QiM2Gs9YdjfL(<14khJ#L%a)hi0ctVu&)BPOV2`OeEeV5S^VibXX[1O6B."HS+BEXH*fS;Xu?EY06HC-)DQa,ce.D#PS41"Tq@fY!<_7Vr;e/,n_53O^h6C8im%6`W:7_dD[3/d?nJ#lt+Ff>GC!LAc1=KAhWQ-8=p)]Gd=[&I-tJ!>oQcQA?nl?,Br[5R]hTS]qa]E"+%=0_uA5Tcog'O80Xn')a3\%SE]@]:!*qV6_.rL5(*[K%_jU8E%Zpqht6Y\V>L[*+N]DD#Ksm6Wss=?"PT5HN/e,UBI3t#MGr$oIg<n4i:C-3kJ5]Ha:6tFqqs(.%b-4\#T>TP_;8B)qVp0\[f9"_,JFmLVkaS!El!HfrCT&i_I4s&e"!eE5N9SGjnEmuT3h,Mke3KDOG.](J=t"H,l1eo32-QYTO@R4@%!-8.dp(\$'I=1tDGFJLM.H+."KVn8mL8,K_L%//UocIN(j5^-C?2pn#rnf!?U46ku*,MXGQ2_gG7e]8`e3TW1QC(]rr8[)Eo]8<9%/,qQ0df&fFs2!Fa+'o0KeRJI6/rQ.m^&Pq)+GVKCZ2SMn3R"nT0[oN`'uHln#dmOSai/)!7:rbUs4MCsHY"\eqR<?0peQs*\)F5?%T"h[lkO3nH4@#L6[p+PpN4&t!o9@A]J_iiD190qirW<Q/,l*n`,;ggq?LC$q!<>:U:Np5A*ek>9&Dc'$aGp-P9UH*=(@L0>L;/BC%%!!0lH'm%WOsK]c%JL*jErLc92]bH+eSm;[1VN";nS5=U(iQ+9q!SHFS:O,==+4XLOaE8fMgX1V78c2aCLLPRHrS2/ijaHq2M1h=%_#Z6]#<(q#[QYc=(2=:F4Zm\$TI58\`!p%34B0E#r1S\]\+h$ZGiPK+Ub4!=UO#&hNX(hn0TM6-SLY40ZQn6aWblr6(_>@+]RFdd%I4#**2+H=D2$"t-!KqdO7dLOn*;q&l]AX5.Ekb]u=$m"3QGfAMdi:S'2o+P4K"fRp>l]SU$S\+0JHTXXjIQb@+2iQ"L7A-Z#l&T@%2ZU@TJ6r0"8cJtr^4?,p4J4i_iciq]e1!q^8gCd@.SPkk*nb-DOn+7d$2VM&[d@e[1W.IE_gR^pN^lA)g55-"jM)4=s(s`!X;6ST%2A9;P!pSPe=,#T6+=_<M_\M8&4aJ`W$.u\ZHR)V8nltZ,\"NU"Z(CPWOLJDKS&=5o\69;@<]+9o(#8fC+/nStUn]W/`Wna:l1+Wg%ncJ)T,$=0iI`YfuW7b^jE/FG#hea7`^>N^.mtR$_#T=NukG[=X#Q/i!Z>9FbCHXs"k48+Sd1S)Fa49H3okflGK?f+I$o<T?8]'6!%Ka1*P%;9,2rdA0cYsMZ.%Ifk,@)MN#RZN_SU-6"n[g0`ZJHYUi+2I+2e8V^Dl[H@30Hs@c#gtB"D-_Cd!PX6>=8\3mPNO)jCL2sW%IS1^5Bt]kL*9#*c/S6<=kaWbH3]C\F\KU6AQ5HE!,WTRUG=$9mC?^L*_5sEO%!/f<?tDR<P7r^3q(SL$0cp&4ae"9;c,n5JIeX`?%S)NM'\69oTaHV8Q5<uMJ(G#"K*^4(WE3fZtT3VtGHNY/_h4rR)@/o()+*Kn@56/q2<%!'F3^LZR%2YK=?qJ5e&7,R;irPfahqrsH%491rXE5ptV!iUds_sh(l7'HOu[E*<r"*Pfhs7UDI'(iWBaccP?Cr=)`n^?%iNK9aQgF:aD`W"i+=i+H4(N1=NaQl:U-21naYrgRB%;R8gm0'JBAG_A`'EJn#%.mn'^=.EdM[!K#Pe=iT=Ds8FaaZL:bK?IG6gGEpYeGDl@?>PqmrG@WPNC8<Or'5*"%AHN#025]e-fdZ9%5<N3VcPJ"h7j+9++9fROek3"JkIXq^GRXVfgTHk%4J64c,SD)eq8he9.<Lh,0X9ciG"lQL8(1=5Z(PQcC_6[7#.H-lB[[YFG]Zh!%/hkrLg(pd=^X_N?A;fqJPbY'FB"4V\P/U"HHbD2P5`gMXs-ob`3[KK@J6f@4\%o"(0c6QdrA`l>+hoAPoA2)O2A<@U,YtqoFp!N3%h%YF0FBD3Q,c0.%NW)[<M.;4''(_!<lQ[kSkUqGL[-PW7DX[_5F+iT<E8c_DHmdIDk/P]?oIEfJ::*-%>r9ld!-*8d8i#J'*]gqN%?r6*Al?!@=:B4_>l-j?/!Mj<*iF?Ua)BS+Ka4K6Zbn]>?.[km'89lOt(b)GY4TMhX]c8>m#T!c-0,4Y1o/M=Ifkq9/aI!An!_Q)c%,(`>H3DW@@XTA;,SHf16YjScj5sd6J(=-dI0QnjJJ/d@6+4m:4E3\,tY@KU$q1Yo8(ZaQn$52j`H/fe5@aUkuLn_m)EbaU>`M125%;KZZ<PVTR)MOQ?IWh?D?D61sDBMO43WC.@Jj+EhM7FMWb1.abTfA_RlA]M`fMp5V9K?G@bA]3bJ?=digS;d?7'/?N4!jGm`6JG4K%7(a?2UB/Y)GY2c"$u6>.?=eG&ngO$?VH=63ZG<N2^f-:@J$SqC@?5W(c*:^/n`"nq3n#N-^Rdr.)uU/<G?E(W`R)"O#2]cuTHTbM%b9ne=A@28KY,&#V3(2i?Q*ABjpDYf&TDcmW*1/Gqqf:@fEQ;shg6]HiSLG:(l`!gXQU?("W0^G&5M=73SeL.cb@R99Tdiia!+.-I%R%g;Kr#tsd:]'%?%XbrAn*slY0XiE]L*MiR)a!;VQ+<YGAZ+2(8.q:E'Ua^0ooDn]Q#X4nOn.6qql0@Rkbk/%f@lg=R#ZhG5FLe1%LfhSScn!d`^Cs5C;QF\WR[tTVo?b*>5`Y<2m+>899uW=Y%LiYbH(Xo$I;QfuVr)<1;UhV8i?'<$F;d&Z+1fA3;.kda=R>)'3)I(p%k5IXtNgkDlp@PEGgRcQThhV\dZmFEZL3[St*\QELKfq@HcY:TEbWQA3$fcGQnb"Y/Y=qNoPHoZZnT+6c(\ZaTMS75^3`@``m\fR!%fY"XW=(:UEqX\tE$G#n0+&7fR*r@_X@3LZ;0DdXM>KBKm3^.?m?"D_X0Ya4%Zc2/Oe#Q;^9okrK2Pi1J\=o+-6iq]h0?'!F+VDk5%^[1Laj<Nq1)>XVT@UfHA8d&u83$fZ_:9_H`F@r?qetA48c1[rlH2<7feiesV&UO=9"gJ3hK.d?22:7hrd::Rb52-`=SG<lfj@XOc%N$J'k"7u6!7DQK?baqAd*8YLPp<:>:4NCrqT@Y_QPAH!T]P9LC?ic8805Lmi>R*BWk6>`jqU'3^I6'GTU]q2bkmtK5J&Z^`qd[rI%h50#aE+h/,K;5o%Uh8o+iRLW5QCToM^T$+>FJ^jjrOpd4-K]Yont$eFm-V0pMcYc%:M5blquki\l.Rs=1/jYI&2<Vp$8j/7%UZaA%].W'mZE6N*XcjAlRhMK0h?UB:fX^;@A:+)E%k&"u%o]aai=U"A*002L'2b&cLXSY5.K'QP'<I^=k+FNlhC#1gpH+tj@`2p%LKG\u%*@J.C4)>CRH5lYmc]sTtr/!R2"O/sKq>Q2K"NJ<Vdn;]^%phASA)d2fm$k4Q9.h3B\)+f!j&_c=Ll`Um@j=;QQD^921ClC03IBFJ%E1@7N5]7#V9J\VY*1?qeCAe9iB!>lZo@uMD)o"9"d(?b3SqC3TeJ>rLbibLV;+,.k,"o5+d@'K)ARYlW-5"@sbIs`ODc'/6]6l7g%"cF_j`OpJGjd^B%28WO$`JA?gh.ogI^R[D!2_HeanW_++"/0h`=`#C7j73o<%YQ\)rnc>V5DR?A^"Tj&G\c.n!Y?Y>$Xf<BCgXlo%P;Di^2l:XPGch"1%bf*I>$>+9;fa)fHFo`s;D?_j(/?%n+=Qne4sDk2mQpsSSK7Oh*W4/=h@&($iJlF/.f?Vn`fW[L'EQ"d4l<t]%nat88>7g>;a24&-mg\$5:D9BoGf&0eNK-$Bo5BE51npmuP:_R:%!7PHSimU6gLJ5$'M.Sq+cuC;=!)\Yq^'-BNSr]nGTl)K9to@I%$C%12T(h7FD]W,3mO;lZj;@Z#SYF-O-[N5rldO[J-``Y0-r_*'Ya<6t$7f913Ug[E`_)g/:4ITS4\*;cD?B_o9_!W(bgP\aJ;)m$%aLkW\bVH(4J&!FIUdi,:]R<+3_kDYK#gb3W!2"_GF;(PANlJqZ%lWFb6!2]@0aM+Kff*6'P:Y0%\kB8K#R]bt`'OtJ6%kf7VOR3r%$nsLfKE](A-5#!D1"(*4TacO-`q#8Q^&;uM`^-B/,l$t^o1=ec>J<u_.`Ud:'%$8u2ntrWI,Q&V!>aW^8Pe`M'-WeK(5l7d57n9F%P\L,Z371;_%_<\TQ0&n$3=te-+(WBcAP1;TkYER^bYu>Za;/`$A/I[b/`-/3rhqeW3@>Sg!3o',M]OCC`/,JH0uM"o6q+c))`'iH%Q=AiNK6J/[/-o[&G`.e-mRKTo'Z-W-Fq\Q&E3gj\<LS(B,2F586>EJR$PL/X(BC(!&ZQq!?JtEJ8Zg,gLu_ifBH3)<'@4?Z0>grT%.Q0[n_@.5X%'=&rgD[/b5+r"n@F-5VIgSn7)r>=r2FP\][Xb2=p$rhe"Q'2b3@bd#Q!T^%gK["%@H8gT5&#AA&Qg[=AZB6bRq3@B%K2ca$r-b;>):+fY*,>'4%,^EUGE=lgHnh<^K0#Hl3NYm,oW&_/T:CoTG[$OYeM^VURJF,XSh64Ve,06C#:/0YA?2]l(Gu70lmfF:%#dN$Emgsod<eIpRS(NUj\f\$r^^4lHEaqV_SIR]n:7gA,8WRIddZuD&[M?06?B,VX0T6b?)6WO82nfk)>Z9k@7TRHN8t0I+!4mXK%RWIet1d5p304640CH_09MfYW/21_(ANR!@bf7^F*=:TJjU!YL!_"[e2EZRhtje<++*5%]*N.'3(8L$$WUD!mts";V!3RT:)WplE.%V1WB1^cG*>;]iGih:+Y3Eu98GHU8?eiqjpUm1[=!.pMoX%6:]pcN4`>+[<[iK\EJI$a7:0!5!m68M_aG&NQb@VIq(i['9u]T3_\6%+3=<1R5k*D]VB!pRpVUTYe97@(t9CT:Q@ekpGe$ulnSO@&8YLh8VrpN$'WE!X-=X;4o=o2)p,*=oqmd(SncG<!b*b[.SdbQI;-dH%5P7n#iPFG/qgB7tXp_?0oWhp2N_"$PB,=)Q3X/sUV>"-=4^aZuMb_hR$r590^dem3M0SI;`BjkC?[\DpaDHrF<I.B%FdV;BLXH&4%%ZSXbl$=p]o3-M,=/Mb5SdDU82VZU15!A--p_XofT<Q]533$EKSSOMJ=%Q#;R9>e!h"Sgi1U/K&UaU!Wk)WP(8VA4@-"GiZ]?=U2%8>aI\?/;=bC&]oIGoUaL]jM=6^@4[pjCB@>r4fB<NdS+%,=Oc0'F:2Yi<SAB"8j+YA-92;K-1A!r>^jIQ\pj<2Q9I-rY1pXRgYne%,!Un0H.)L>J5L8t?RXYfc"#oVUX(7MQL+G_!7SB&]g;Q&Bg<Mj;-Ue!0'K7HH?gN^Wu&9tgM(9)?Nae:_>+,uLYQf;"Asf<cN@D'%"3l6t]fo4U;d,kA;,:<o$J)r!=$,?:SnCAcj)aI-P+A[!NYD"e*eBrT`3Pe_JQ>7cXZk^<!s*N9XRdEfP2B%\6`38qSR/iF*WWRX%6"Ynt6t:Um$hn^p0@L0ir(NaZ9n-;JNAYAE%S5EKd0(j0.70R]bDk<G$_\#^,k_K6h&1WHScMJ5e>_f'6JYAF%)mWT1A=ch%=i:.%K*#\#c&M,C-gnH3l9P8i_R(o1T_B=%n`8G'[^]XkU]^"e$a8<"1VD,@'4AM@o)2C2l'Y@q;h\7#cgGW>UMPS&7KYLKdQ-0Kl?p,7%A8Dk\_c&3M"nYEj_F@&h`F?4tj+^k:aHDpYQ@L>,O0P[h3L<"r#>2A.ce30O.:9d)\_7M@?`CL(E*tDe_%b5f_*aUj*a^tTE]F;a%b^-AcOcM:@=T++$[$@9J1qGBm/&7s%i'b"TYXo9ucn8_XR:?-^a/;h1[Oq,4N`AMB@cWkuM;i3rf3)pPF)9_s5V`O+GV_VWoBV%R%%,:`N,g7,B)>6=^<9CP2P72X+RFb+o.H1eKpO^hC!42L1!@Bi"bHhZr:m_WP\$OPOcj#<E*4Wf\/-U[P`,?fj?'PM^&^3r.QU.77%2SZ_h`M5-f(u&E:2i6NpMML-&5c1T"a1FlRlLs/dBWdSWV0@=1S*=)2P+nJ/,F$;!4Og"9AuCc0GOD"a4Gi8>q4Z"aT_H3Ipi]uO%!K%2OKf,4Df2&R@TMrrVO%U,36(\jD7$`)#Kngi]A2Xq'e+t,!A6Mqd]e((W%,RTgRFJ<80Ksi@Gf7;6V46DOT2`F&*"qf.J_(h`%M%,NFBSW+S_E2L_if`J,EaGdUbn]02g0Er7BerNj-(\IDf(MK[?NBrapH@);-cuYsASr$roQ@qi5>S9PZutHG:'=pa=]]+m9LW<<%Q9=1Ir+Q<VM+r`XH=<0+0CCEEfj=jK-Qp0LjdqZCh^;<cIQfb!eRQ&W[GPU;,9dr5)GP.#(ONp]FYsajkEl#i:g_CiBIUn_(*Mf<%-=Ej]gt?D"!mViF?1V*)ESpfARg=Ek72`fLg$+fC8MFr`B[)q[md5+QbV\SEQ4N#j5iWsi"0o4i72WX$$d9PlcEm>"M$,.p,Y5s`%a6iUa$T:IVMN\Nl/jH%gk[qs3(N^CPG0U+NmIL$g(2Glp`B(dab5^C":YH'/m,To::[AMf[<OHZ^o*$Y7n%7_GRl.Xr&Hmt/CgGe%n=3uSNDN-[#]E@6-Tr+(9l:s'!6e3)<J"=b4OgGD?k.K?I#CcPdT?M2949gl(19:6ZY7>G".HUiUt;tO"`-u\M]Cc`_0>5G(3+,B%A)8J.#>FfMji0G5OA-I5^Sf)3/Mu[C1aD+/W>4,HA?619o?7"=O#fPlo[Bj;b(s:/Ag9);2]"fh,Es"(W,ilTfTG_l&=%h^9<VC.%Dik.JnJG&=O)cHrDWY0m%)a:e!+-1,\1;!<Rl)&>fTm%N8+h(HZBUYF[b#p*K!7B!`fIr"n7;/*OUF)T@UnH-cmU,/3At/-4TW%j%-cjt-&f*_98F2iS9fBe]?rP!)3IB:m#6asF.^_oK^bRGY!G91pKir%tEHb=N'k-4Yi*p(gq/lq/n8IGH(\pN-`Lb_s7l]H5Ua7#/%Z__R,5nE)-]eDk7N'Vf*6k!,a+HV`%<@ZLhjm[5<It1b\:;ZS]ChGkKl[=_N5-;Yg)cf/b`:"UIO\dAPa.uO8*qA`52rgk?,]MZ,%_ZI(8[TI?l,Up"^h:f/PhAbh$0Obrk.JW4c1kE?r,`'qY0R<9BR],gr&37F[%aY`b!;>Z%JNXXLi(Z]Kbfe5=iF>0tR2[4i#C+nc%H@uK2:rH[**Grm)IlWo"gMd%630_W$1@pRK,P82];t7Hf.pFLB+5+nJnS>o],DK")<36*(bg'&@Nd2Y[@j'mjQU'_/GBdU4kQlk2%Yaa?N]8tXnM\!&*+ha'PW2Equg3]bU3,Wgbcnb3_SHXV+EQ@Tj&PW,VEki'gr=X*Zb]"dWT30K_P"CTPgG;SnmE,?t$9`"Kf`BH^%IO<R7Cu`;Lh\j2!>];J[R>b?In'G*.YFM1b^AHdCJ9a/N\S*&?jRm;1,ej/r3BV.e7_Y"+j(S897.;QCK8#HOfpK@A*AI#%(47p,%m9/*hJGA53,9=ie@j(j,#0,u\&J20Z!b/9\jIXd^f"kR/Tb^/1a>3Ee"s[K!"<gE/jmN[U;*/TTA+A.k0.)R4Pr?Ze=kgeVN]VQ`%1`gfS+hX]V(^jNJX?e+%q:"CY(1%If;s?#C/J[2el)Y-Si"^@5rWn_jq%4Qh[QhQSFm"3I6nYcNjM&4s2^!(04c/=Y_7/^M%jPN*%`2>/&_Kq#TF5roNOKM]fMpS>'[mNqr*0%*']jDr,J=V\g3G1!-9D^e7-ZA\p?]H#\b3j,_hpO4S%")OmE3A1A+[-[!m2<!l;0;W(%m4Wbi*i#uZOBW6;c<:^2YF_/[-I-FIQ0F*(53Ats)@/tb%BC8rhAohWp]Y[,+=e<Fd/OO87]fpGPDfRen'H#%9MiP$'Hqa_TU6)Y%OaYkM(itPrL>P3*I$<(3Li5rD$Q$]np-h3b\F,nq&&)MlC7u5uG2Gbs/0r'!Lk+"mC%6f"_!D.ZcO(52nmh@/W1gEZBMfm-YidM0%#Zu4m#?X?qI;YQ'!)RT04(I>'pL0$)3l"5i4Y+=X]^#rDc,U(Aa8_>_V7_)d%kl\b6PX1fllWM][i$JGK_Ti0_H,G`715Hi6m&%B%rG4u.\sY7!<sX@=Y,@T*-?5IbTQ$UsSDe4*b1,2sSJO[I^]KY9btR)\+DeJn/p=#?n<?P?L0jl/-#?#4nE;..79(dNH3'bQD&2U@%Tj1)`,N<iH%R*Ql)'6:UD^O'MQ95;gL1rOV>`L1]3pC`JqHU1m/nb'Ck3&A8kL)qFBXBb#L[_[RpfR(^@F<nI]l]6Aim)^.FcCXd%F!].uU?66Y\Kl&F2+9jia$"^jg1->kGtC:/o-'A<,_^/d=LjgS^E%aF<mu0.f9l8:_S2=[G*=e.]\7&ee8Cuu3*ikKI7%bLG<:[r%VD&1H%>14><ZhI>-5NuKQ'2MCA6\T)ZZs?-XVNV*_6m`J*6Vig>96OB'S2'I\L#4g%u$j*RVg5\:_fG:Qahm:KKBq]8\Pe/7LGfs%k_-Ao0N#0_3C^,IM#_*I2*ooi][?si-*]L?MN'#M6k.P#HO]@sHWi%9(;YUe3$7gNEl$k8ggZ5fbo^=;]#%QW9=>JQ#i99hYj1qb%0p`7khsTC6'66s5L/^f<6<Hlj#5$c6$H\8-Qlq)["sGNHJ1:o1#rPW/"--ftfI:tMYU3&rfDp4G@bgCk>EoD>jZ[U,PG>u7Y$Is*%-JQFC.@ZFNEkMBU@B-5pK55rVm?Q6D2/sXiBh8r\(c9rE1Y5loO=SWoAS]Dk:!dmYV:^`?Pr467a]k;k[,;^^7llD2G(2^tY/o&l%,QXT.j3:n-Sj>\n-*\BVP[JK(LJIbEb,GGZB3H&]h7qd'9a+H7lX+K.c<C=UE:5ia.I@k0?IY4CV564C_`MbURcY?m*c<l?2U>P^%EE*#@+I]TT7@"mm\h`7meP!BHGa5WRjpfF,_3T]G.!SJ:e2$:p,+l005n0N3Z!c&7j`4'm;d^<Ue1rn(/i6usHU^Z;JIXam%P'.V%=O!G7<,u<!XUe$H18*j"XH`B&h.B/O[qtjf.?+D,D7A=S<0bpeS./o_'`#+8.-5t8[Sj>2pV;-,rf6PA#'78CDlNb6b^G/eBb'T/%iaiTl[Sk^aM"9U2QKqDJKQ%RrJ#TP$l83]'k'=p!<MA>\C$&ks@%9hVgr#<DRN\u<W%.HT."fI,JAso_)F$+@H.-"e.E7dYMX$W"%WuhMTiaB15^WBK8Uo'qUmA8t70<tX!VT!FAikiKcLL1R.ZfT?-_29g@ID^2JnfUq*WM.Hu$K]`ioq5]$,Zk<Z(Ro8X)[*@ejNKOD%MEhJO[922U$r@./=i`9s()ipIEa2!>!YZ0:"XPdueD(IVkLf!dP=MOI-67c4R?FeZ"=]%e2D?b;a:*7CIq=KEgBcpgFro;pDTEAq%GlRlm=!9g[Ve8&To#q&%1/6>k#^hEoanEf8\a:-$4ZPb%i$Y]m?B=s8#Bf_RH4]Zo>DI<D)TaW?L;rfrma`c<VdB7A,<4:ZI>)=I%dqs!d9R;%p):r)"h]mHfHiY:::L/;D1"t,=.c%2_M,h3Uqmg?*kQC[?[I2q!pD)&cm*_N-IOBO-YV-uD&$Fg;;)K$hk+6%9!L_?'%-n=aL_B$8?QW,E>:P9,GNf2Q(qqF-ro,Z#g'>51ON'E@d2E\@_gf<piT'5j\fLr?/_$]'#\+a*6W-THGH!@^%3g5<$:fL>B9Rg-(%'tb(t=//Q\Ke4B+<)TA"m:OLh^kc[=Rb^HIRnas9qm+3g:VA<;FGK!)^Igm$`ZG=&FEs+WB:QC7kYF2e2_R#L?+t?tGi#7/Vl87^%"_cjC@W$\E!jFqK>eg#Aim@CJD3n%k5Fr>N8sKKOos&ob^^_IRM7ihE,E0gZ&*NoMhq/J)2)CO3;E->7r?p.!I+An`1Sjin=!1]E%E_.JR1;9&cOTlVu4A@;r8VED(id)!?pR!@CUc$Jrs3Vdn8KloZ*>PId;On,e%EpCkF"\mu<f6JB\ep"O.[!=EM+Q&2C04i>OCCVY%P=8%$m#/n&1mi#P*1'%hNTCW<Dph2JcBPk!EcjfAiR%j#i6S$(O;ViYC_dW8(H\]F#V"#L!`nS`IIG?06u"lW;qHg)\WX4mH1>h!%=Qq>2a<D(pWfIBFUdOG5aj_(L"]uVK`&P7]#CVb+pNYRCLU?!sIe:(s8E5bs]fG^Q!A"jnV2jFSPLYiokY!)<Le'-AK/@6q2VV2)%KG7m(B!m[3rB`l7^lQDtAm2e#9hD.+a73.FWL99QWf2Tk+046-ZuaItOkS)m[8,A;Tp37mOG7pfUubFa`usb0/I3fB_Oq>rbKDf'%2#"O+"T8.g_TEt2J0`R`_XB[q1t7/@81QT5!EQ$./Vc0j*+X"+U`WX=)(#%*85%7SdY)]^32ASK%rHBLN6*8lr@GUWjcF)Y[^d?C%7Tq^#[GRL6-=P$$[`b8E/CM#?426qG>/JuT?]%4.b%#C(PLfG/k8TaUg.@<@Z:G3&r6UQlqWS6Tgon/fdUR^-c@3@X\4mTMs59p#%,$ige:L+GZe7*g4"?*4Y`heeu;c`/che+3sk'igd)5Q3mY[KSr=IDW?Hp$JDM^D"94!/p-e:+i>WeQo6laRu9UsG8Bl*md'A<8Dg%2D?e3["8#d<d>,sUgA,Z;@k$p;>]%)!?uZXMheT2s(M`O!,61$64,R?rc9$Pd3^G*LPW`lS>_ljV#<[Q76k2FRlsesIXt&GkCW3J%is_3FIK37IE3`UF;N%?95oQl;KHi(]V+ja*K[c?9/!gDa214`mUQ6<]MM[G[9`+<pjQWprW##J<n!S9pnBpCCDXtcCT;KNghHTgI%7Io\_W/kH-:\t0,0ra?uKP.fu)5NjU3?T;f;qdUm:F3s5BG1dd7Lsl]QWTN,q<k'$]Osq2=P-HDC;1=AH$VH'4c/ope5JW;a5W:H%<UJl4dVfp4Yu:,2Ya9fB_YRiU4`HX2)B?De&k=`P0o>(iBe:6<4!gMR?f+!o:$QkkMau"4cD4B2NWl'3L**r/pK[2EDJ<bCSWq@I%[&mi6(29bGOCI='@uq#*5,I/>i5EsJeRt.rqV%>:lj#P_bgZ"+g:)9QBo5JE?iP#79/8's[+DJb)agN)qJ"j\_/d"!`<O*EP<>(S%HeA!T5<;,aoM`'m8fSnQU`@@N=FY5f.6^A<D<fUuD2\BN.J8q"Sd0CFWc#)WVloWhhK6#+:TnJiSV\Ks+0>55^,[_>o_9H7fM$;`%\'3<6X"Dl,%CrAt;dsC!ml9K(jI-+qZ'Jg(Z]MJ.VRMh"*k`fQkia&S0Aug>-7upm_[<1cr*4l7E^oLK%=g%[?&%PZ'@5DZkYF!g%n8XiOQ12d%r9!DZ3BKL5:?*m'K7!,NZ3'pk0aF3h2^XuAlHsBrXuRADa115H_h>j=7U@P2m#6m_,q#ei8H%+8.AT!<NV8M0&l(##%.7U+c<>hUJ0])S6!u[oJ08,S=qgu(:k4Jb#V"m.'A!-Tj8AbVKDt*OI6CM7)UsL#m#i+U(e_`4S$!^7`GXs2X:Bh<.4goZ`PsH=U%6Z1XuHCmLHNjU6qoT>MLZ:L,@+@:seEJD9UG8SFF*@`2V@o6C)a<'=)I@k1RTgeN!NARe^.#kV/,aqZI@h)m`TFRVjbXB)b-_cpT%mA^@g6TZ^:Wm>u#/ZIc<8V^5XB`Z8u]^br`'J3SZY/=^EDtgF_:E4c-5RXfP#]l^l]AiG4#,$"U_>Hl67F'FrU/ZS3K>3ji:MXcU%rl?dA(cKfU<CXHSSRp4^M^Es<m@KME'Du?J&_Nnr@%]G#=cY056bk$4)?;;[+HIghr'*G%EqVDAj"o831(n^$pXFj60%X\$-"&L%%5EHaD6CXV3=d:!net*`S$9SC\.%c!iJZhj'9Q7A<GA3,,+T3M?.@:D!5_!Hndd\4YLLV(G(m)CX<$o0$`)==cpW4`$Qh6NbC?%[2%L>AqErqN&gRR(;dh5X#j+FjA1'o$(/O%=;=0cN'$N5)Q)#,UK9hqY1%-UY.n.^8V@bg).N&IY(sJ%Kp`XK?,K1`&-_o<d03P]pnK%3N$PO!jP5lX,1s34f8QWU?C0bKFbkgg$oZYI!;:Jq#W>)PO%]//-qk)!V<-8`[I%D?1,%F;!a0meh7O.kCXju4el9mHI*rUYq<L9%Xg5"u/*A_.9'%"Ip1Y'Im5-Ht;ErQE8<1h03?5]2Nlq3O7`CBV`9oe/:8fSD)c5*3Otc5X'Q?*&em)!;>FduQM>ZP?3X=)DiTZ[b%_G$_jG<%6\B:4M'dWPdh`hjX*a47sn.Y$O8MHAX'Z2>".QeU-JOC4PKc6Snr8'XF#@:kGSD)dl6,N#7]E61d$r56T@'Z:2PKKE6,%#V-s!@.*jArd<S+kc[[p]YE=qHfTm@o:HQBOg[e_@7jJ(%.?S_!oA@#d&;2P?R0Cr)F[FC&r)KF98pig1F^t8]_S,ZKi7U!+AeM4%Tb^jeO33>OX7ZV,514N-MfqS8L]ti^<b&[OjAE?Y>]7u]ds=mTeD)1E.oY5l<LuG/k0L)rFG$>klhj<lF>UtDbb/qS-rsJb@0U6i%.fl-,LUeoq9B]LY@'ZBEjb&fWpo>hjZKlD'Qr)Aj822C=Xp)h`[2;C)VRnu=kIAB)"a[X=G6dI/OH>eJ3g83]OBr0uK%`V3k4Q9]%5d/=^fFu#G<R(s.r\7\Vj>!p79^h+9:a]u*lmU>f5,nNpGPe3'-pX8LD65"GGrCB39^gMbJtO?OrdNfM(JhIaS.ms9ak+m-BNls/%KUnJ$Y,Eq!O_6ZE=X=e^\i]EIZni).99Tg)o,rKPd2%"[+5"#4%r)[h0`mc97M.\kH"Gs.'8d<g"TmI5Goa)^90=l,GW,Zm;\TN<%3IbCA!.aT&?0^n%&j7,7="]TedTqH7!M#fp.u:_/ABTnA[_JG]UrEXPs)P!ZpNDnA1T[l'hbOiRH6.Dl'+9p0>2pDNE<TeT0$omH%`"F]mkJPscpUhK2SMZng\DE-gM6"Z0380pF-*WSmb5K`Q<;;DL(a`(?OD"pA^520#`M(CEIK76Z`?/+fDnL%(R?]Hu!=fuZ?b^"0%IbE+&+Iu)=[Q*-S3C`0f7Xi<[lq5,'.-1_j:*^8/+uXs4$Lo#`;8A5Lcsu#Pe*mc'-8_Sm@T-G>_3lasY*WhXE%C<JZ9(t"8%qe3%mRff7.)QVu2(5q?U@k#-98V,JV`jQCU_;Do]hnOHo/So0&tGP@1\pGm=$Yk]M=i;)J6baJm3KcIdm=o5E1mJ?QI5Sk3["s^d:UR*%/U$+;%E-BEk0<4P)&a(';Nahmj&;+h0_k(K>hcLqpbQ;q/aObqDj:<Vh(Fn"Z:4&W74'PU.[i6/07#Y!F0dNA,d1<1#YIm5O,K#J%>QRFm:5/%@&qZmUq6]BL"H(kS<3\&dJ;M/&q;t._Do1BkO[7`3k<_OO4:VEk=#W0WJJZsCKhWZ24[-LU]X5sB>GXp52a<QQRZ5^(%S4nQ;hX2`<g08QMj9fZ4R[#?h8:(I\!gDO6d43O=IO,!V]ih'1#GLs<qq?P3;PK"nm-QD<m7ekRGl(qd_n!\A.tT"1BS*?&N'+b`%)(q)\"aC]8:.)uSq+W%3etKI9_Cu)@&MnBU'/lOE&$apUi'Xt*lUJ53\@Tch-WJ>GP7b)5qtgrW`E'Zg^X1X=\\2((@V0BSokR[R%3jn(>qomc4((+aKZRU^"(?$H"![304O7oNid:<PU5iG.&&01M2UMc6Q]#59Dg<Pa.Bg[Zs^5"5:,LV;DW:d"@nFK^sA4+2nK0GTY%!n/(4JnIV:O.+io%JDpb-+SEK@^%>@2LHd0[qi7oc1_)B$==TUX2R-*pAJQ+XE14dIh$$T$2shg[37Y%j-<otckj;n)o=u$%Zr[1%cFugYS9GHDK/W'G"dSmRVmp4RB_7HLM6LW"Z4<jaPh^kTfmSLUJlg2ef"/F90R8'nOSi9_GLR884H^m]Z->]Bb@I0e/m@Aj:T;GA%joM:m\n3pR3Rt+2;t>iGAT?+;99E\(8LUIm/P_aR-P<kQ$AqEmaYj(]He_2=WT^:tnrdOKFE]1u)dRI;('=B`TNWW8D?LiV%'[Wt%R(0%KSh.3,+IYk2LMqHbi\DiM`oU5\I*:[Y[qqD`\0^L+6=<pe=]NaPTT=b!H5?F+3D77,dQ?SU9pcf"eiUdpJSYgeEX&)]lFT68%NlqNfb+N7j^u(MHVjp&neF'h,LJAcP.>(AV>O_2'3opd];mtVd3HWC]FM,-F9f[<=`=+dc>O]WP3a&7,K2+%'nBr:;jU=3Lm,*sn%Vjp&njRM&r6`6G?LE\!faIuPXTO[_YGp66P'54;[KB?B\V`^XD1[m:bV0r,5CR6G,:E8qh772Bof(5r4SLbT!Y<AkT-.a4&"a$d/%mm/>-j>f$1O0"UA@RYcqcHIV-"d@g'K<\,IQ2Dm.b+X!);"OGroB&e+N4*7Uf9KW&bBt"Bk,8r!Y"RCVlU<(7[&)!'cRER<fUd`,%.-`2En`?"`P:ns(ns)R.A+`BrL9P[DWKKlLdh&_*M2t#1HkZ_/Ia>:JH5K%)fhFY:X?"^u]-pW)RO0ZU'dgPl*X5KrDuaF2g2LF_%$Z1n0&""K/6,f`f2ST6Zn-Bg!=n?g1&OEAkjI0ZNn?K$Aa?aU5(P,IX"dtF<,ajP\pllF/H(MMMhk!["bE`[/nL5dn*88`V,a8.k%#t,Cf<m0u=CEAjX(>-[dIX-=`KaS*hSs%Ye0NHl.ZK6[=U+Z!.9-.]8]Z>1eh38[u8a-XG4*d8-XWg4l1Z3jI^5Zt(>k@lao(^-b%'t5m7Gnkug]mg&:PnY)W-q;'%!E2!YIi64)Eb6pAjOpeg>:?@H$:0Y\_SC)G3]lVK8B;/^.C2lp054H`:"h`^G$+f][[^UrP:?i<%J^a2:IoJ3G%nW&:X`^ZH85!r9=2ERR1r[,lhW'eT!*U^"J`mS#HS$ue8aIV><7IPo%#K0t,Wm-=HA\3Gg/fYVG[KeUEbJ9f3XmGI%$6%L+]L`G8anI=!rVae`Zm1KD=g9/4;P'*LqopEqMegc$Ge#r,glXB9Iu7=)-_K.'TMo%b'K)t:DuX3j;R=D#d`JSA8U6_/noVGs%]H\B+P0JuM;],pJP).1u*hRViKO+.Se0W'B]8Ijg8kF#h7BQc8&k6DpSsR,=,3(IKG"7frd$c.68P_oN"Vd5#C+o=<aIq2\qW1HW%q7tA$;FA(_"OYDX&K-.4!RoD5Nl]!m2"C*DG%]mA1pdW81/drF0E^^nL^YPeqFQ$NWTK:'5u!lNmJ(#QGa=+'Xm=N_d[X>p*Dr&Z%7disYk9MD34=6>W.U!jPP&fA4S`ta!cE;8#h(V#?K>B]TDbhI=34^6^0A?!^0!?4;[P%h@a0Zfj<m@]*ql*Yg*e\f])H'+$a$\/4%Q9sjb"@6$h0,JQ%A$BQqgL(faUk7JTasSjMD*=PU>rSrK%Jas(m:Y^%aG2k;0pE8omsMW\:T.Tc%juinoq(tu2eSq$b(nH7/U1J`%*%/f%)0+7.;p'mUc<TlqihTZ$p%`RYf-.[M+&42O&U3\k38pl"A].lA&#[#)bKC^66V<+C-R?aVb88WB8S$,(%'(!PS[jobBTY;:%-#m51(UW'WlrY_".^c`(:I8fHUTLVOiXRVp,BBE[*0m$+Io.O/KHoqE.icZqngr,hOUm7^81+t>GIF."@E0Xuh7*mH4>3&"!nER(%<GI5<H0<2tQ=93fX^U>4Q^&0E=S7mh9l!jcD(.F?;JR7en[ha&7W<6ML,9Tf&RJhVK8-/GQWC,/6c6IM[$NZ:ObA;$KI(6[W_Fq4%DLgcRTA9PKIoS'QU#gM8bX&g17dB1**A^RoY^9rWIfA1M,LuCa-0[lV,B`c`ESPAR!'(8AaQJ^mOPj3&pRs4\8-Nt8Fe8fb;L99p%[?)/-*h7^3Yq)i'@S+3@UDAVu)8b91X.!g/L72'"pf^?T>NaR:3'hX#-H#eE<&g^8nFoS0e$>0^HR^#]YO$"GiNGe+j02cfVZ+G3%\5VK\-.D@`<&fG;LsB5IR>)U2SLVK$NBGo&$OYdY=*MAg,MmjtG`!96S6^+("TRmnBj_hd)/?Kd7XJR+iG1@g:^W]A#*))//VTr-%0[!687OP5VA?'@;]K0mLTqiZq#S;DF]c<2IkEG.c0$"Gq5Gk.'"leceNr"&C4L_Uh:F>IXl!t7a9/E'E2d=V_DgN%Cb1Am?F,&n-%&ehcZSTrB,l3N)jH1BthGm[[K29F1`&gb.-g:\ChI!*S.6FUH[$]/QZUF2Dpes4KAK/`CIA<ETZ[0:k`PjB0#=Sm-\DMf<T4.d58%;hc=*<a0=?oM*KIO_Z;1Me,nu0!5uZ$?W*u"UnZpbp!lM]>4k1=#.m8<lGKZ7q0QS9Mq>H<f5L>O9Q.@s(h=40#MS"Qsl=?#3D!0%l\9U$Uu?p)\u6&!1[H"e"F_r1jcS\GDhN()NHD^_e#1[];b,TK>Ic'/cBl@([)9Up;-\&Q;QciZ\io+6eHs7No8=(*djMJT3mB)@%n>[S@'ciLIi;ouuLF@LU;s!:,RV*)+RSB\C$Y3Pahd`Kf9O(egd!EgT(7Mf_V,%#c-[Y"@DE#[/7@.P&b#>us7,ucO7F/?4\PfpR%%9'5M/j@m2lQpR63XJ+Br(7EbaCu]fkbPB"reo]B^=)f+c:s5f?PGPD;6GFcQPcdl5'2t!0S?bbAWOH0Pt`XV6_3LrQ'Z+38Pgsn%DJ$Fp2P$'i.XMupe_,%B6PEPO\36<V.[NnJ^[h5;\k=e#YKs*+VMU3hh[m2]aek8B4uc<O=#QW'.HpY>e&c:a4(m#VLg&[ZRnbH"%%ZTSQflZdtHg[:r-^@?&E8($.CcX$D_:2Jp@lBmBBU.9d]e,_6hka7(*?-$4>;i%:@=PkJnUB/5;Y.qio\Lsb:+DT*qUWDcZK\OJ%iOpe3:(!4>^[`H!FAfYk2cEDaaR0cWe"08]!D7aJk760eZ=i+aRS>.55^2s=3iTO37Rup59dc3!-XV_ig2&f!!!3IJQY\]3jX7Y2%nIF5o;?:JQ`U8sbVnEFs/3,>(!(@V4n!-Tpl4U/S0$-X!-1=sAPka7ordH2.@dm1KBhT)e?QsHjZIZuj;>&@6!Vthq4$38$;V&g(%pXMi\?/"^@:qs2/3G4?+(],Y]h--eC:?P4Faq]%5Y&[ISLR-gDq=BmjY,]t+-0SLeLS'e^!3%G\$Ct).I9*pP@L3,u7EW4JZ6E4L%>su?sbiHJEQ%HsM,;!=Xq.oCN3":#J20\6Z0+o)W?$%-M2`*F!I)Bf((L2"dZNaA^]":-C_d%8,j8!5FfA,UIA/O0nVY#JEgul6j%Kkp+0S?2)lioSeIBs.p-9>9'g=#'lU?Zr8-j]Nk(F`HuQ9Wk>*d1(gG[G7:qZR]`NMkQ=+B]@S1\0[84;c8b'Um=PqlOeN35pt6K%<t[tKq=XZG<12*?l'?]@(kWQ9'\1cIN\^P"#"?QsD[?^9\jqA)rD#^;ms,hOH-s%&18jVLk2X^E%j&Bm.OVLe1rHjdVcG#=$,X5C%5,VCqrEXD=U@n)8-KX\f[,*18(7iT5ddjJ-1&1-==\EO*qZ79`#;,b:)D!uVbcC8o+eJ+b41Rl\O>]h/jLLE#?bq/oU,1<7?F,O8%:kRY)/npIUrQ/V8?%5@%Q]Q@1)[tKU45OAthHj>-5e-O^bF@t"L&$EWRhV)[mhgY!MJqCS7W@dYcP]YEc`[q@0X3t';ECB61'@tQ%_>h5sLDSZN[^/p;o<6;)BT9eXgi7O8@[F/gi6IEt?&$tdE$o^F21*C"D>?St)t%UhI+38USX,c9DI5U"9mLs(92`F]m]r>QY.`f^%>f$d8\@W"`G6F/TSo?B4V=GXN=!"`!LK*('OCOUsf2/G.$@rXCjMIpa3HUc5!ZPDa1>l#6mYoVKR?*[^et1L(U>an!=::c-?#-ut%&iIJ8TLb?L["ND$b&<W80U4GOQfkh>7A47V.YY+^AJmrhngQ)`qtS[hQr%2[ng#RXqCpa;*F;,J]>S\jFPFF5DS*?eV3#/Q-S`_S%$q2a#AJ\ZG&sN.%m8hU2(Zr5Z/h(iE>Amb^NbcYr4>RC%/sSar3itEF]dp:5Ph*q4FE]?AWSu:k*]#F@RQ[N2a#2mT8P@T>OQ2dL%BrT@TabDf;^N&Z'!_W)q2K7`XBWC7*_FsH!YBsg*.;A+te^ltTcREl"(NU5lV\HjDU)BAmW2.I%-gA%%TjIG`kd@_b3@]_!JutA5%g,7/ddd@`1`7`pc=Z3.BY^9&c8TYKtgMZ[-SIZOgIjeQC=-(pc4,JPG4F:mLXmcG;_L'p/EW&oj#u@)e8$@>!%<(6l7>_\ZFBo)b%clgCB'-mJ,R?T>8F%1CF`V6T*m<]VJ3&St<SX3hkC)RosT>6L'g!hkDq!F2>_R%9mC\\q4F=)^rp&)K6V9@cI?<O'@Z#-m.Ui]WU%&+*;`S584-P"J;jor]iD^ra.=O1[#p"d^$_Ok.k@'J)r_4o3+dGuS8HV-Cqr[I\m6V:s>/$,W"Z)VpQRPNAHjd<Sp*`,R)(SJ"e/%hYp/?9&F%aQOqepp#W\_)suh/P]ZLe<p_;o3'n83ak?U"Vr*uiEme6F`f6XOi`0VPZ=6K$L7;=0Z5Sa(abFkj*ad0>d1J3\3f+>I%h3+&#G5mEmX>I<fKl_^+!X7[&be(LJS<hUuUeb^HSfUj'"ha&`(@72X(8q"#D9Z4-0M6_ZoqHCt.s9!-3qm`Lil\Yl'3@?;m\1Q)%XS;RV]6X::Wu@m4#@?FC?;?.MX4-84J*$+&b6%tCH#%fo.jl:f\g0HDk5<@RC]:<&]0qs+;@\<Rm&7?D5]-=+)WEF^R*7QB:%9sS%OV,)Q8)C@-CNfJT<\D(d9u;k%a*[X')M5ddXh3GCigDfl5f!1Y]YhdII'G1R+Zj++"kA="oa>to+Kp6rN5jN),gS%pW@DNs?-=!I%BLjCYC36MR!e)TM3OgKX9$M_s6t>>j6p?L>FI>#3c\N4UHc8B<=sM5:TMXKPS'"<8UT7^kU,eLFm8Wg2Zia7Oq%8.O,Oi"SjS.4Y%l5-c%gF>:<QOHc4J+-X!8L=XI9/4siIP.=]?P_9s]!/hiW/q,&hm'c8,LVeYGcF+T$UUnB0*d$:p92^Be=$K<4e@&ENI%LLXKK_J%'_F[7#Oq'q1DuWPB)ub<+XU:_at,f$\10Lhi[gSBZ2h;p!5c-nI2:c:J>>,+AUS)`=b,\$$/HQjW9@CfI/E/(>ft+CaS$u7jcbbB%h=FN.R4-j]0BLYs'cP5:;Rr#f]T`,'0'*c-,QG#Aq:'2Zh;_BsjYQE#\s*`]?TAYPMb[j`Vc9"E9Wl*D8e"h4f2()C<NQ_,nQnHQ%9WgGtY>DaZn']odEqfE9G1uZDHi4'f3P3i1RbCS9p\H<L82:Br`P$^udr^Z):r7SXP`M62SK-4,YFkAg.4uS<[X7t;%/*uk%ekmT%Hi904!+#!Qp3Zb&cSP+;=sn3tf2"*-ZWmA\O'>66l_ht!'"@gGFg']uJ4pmI^gD,chpqOfpUU3Sa[s-TqN:-HIVSUYC;&4pH.?WS%8lNE\6u)t+>OM0JkSJD(O,<>u]9:2e][opc8pboWqtSZ?T%<f6[')_t:](^sq?a`TQA$h</[)\9n$I,2DtOdo+M.DU5NU.1'Has)%]md'NOsD>:0=Tj)-Tl?"^=A:aEr3P!CoW_q,e?)g:&80\jkU;9g[^5KrKM6n]7'(]Bs?JPhT'h?hLj1)\];C4G/[\a0#!D8WlqqA%fc4)NlR+]$llq[qd='!II\LD@&Dl\"kJ(8JYM[T-Bq"J_;`<f7)+1milR1oJfr]^i>N=0+qH[iq?[&]G1mHH5]_+HPD3[96n)M#p%)2b*&S+;dg@%*9N'Q3TUVP9+#]me,5qOR#4-mi0>hs5Jp<ncB40BV0W-^Rtcl+MQ2RJ$<af2'S<I(/#!VgPQ&AbY_/nt@nqa*7Eg%ki]GO_=]!nUuoO@rQ]VP1t58:0149:rKQ>GF9MU:Hi91IojbA]c1h&@#:Y\(T%1C"T(=5;f2((:fA5[t5NU]pNafKRlc5X>EsH$f%YETW(deESe)hs5QS2]Rm$$Si,ENc#*Xa[!Zo2ji8B32ar&"QM1_nCNA4#Z[$EnS-TM@$ONLuf]PqUlU%ob6a>?%9&ME^Hj,(?[RL%qT3nPS2539]mcJl./R:_b+\1BP]D"_c(J+UeEet\Q>TQ5=)&80In#P).sLJhR'nCQBaJ9O:BH"W`fp3A0-lq<$UIUX^aTF:bR\n*%4].RYVRLqTO*[_Y>]KS^&`]i^Gu%;o4g$U*D)83[G+,.$^.ou)#D2[J]]e2nLZSXUNnBL:`qMuOnR0o-7)SuUq[,fPc1Vo3/N:q[%R@N`9_.NLe&6_iOZdeRCF^?8]OiZj$iO@Y8lq5ah]Y4ALln.\/*8?+YeM7tPm+.e8i2=/hfjiL%rB5:r9MLG5U3oH/j-JK39pfoA%ZbDdHD0s3-Yp=dXlS:@QD6ak@N7RX0I_MQNVQ24oD!Xr+"I;_h7&r\*g!:VGY?8O83iAoFdRbJB$1m$?GTFVol^:Gi`,Es#*.Ij:%;kccrDcj._)Gp=aMZIm#8P*p?bfbM>4@W2)r?;&5i+:mcIi`Z45goB4Ra]"\Bk"2,roX.'pe.GA_,l'J[:GUE.DU!%Fr>-mVJaWq%Niga,=u61frb`LDrK4!Md*<tnJnb)*3CDo++2AY8@fJt5SU,%uGJaR/##HmO9":<Fh""nE?3RT6BML8Oehf<B:A]!p!4*7m8"[4r%J$,"7D5Z.o>LjkcO5/ui[u^[+<F/SP\(7V*KGT6tYP(NF3CuVtNCg#I@ORnSHIG$(NaC@O?R:j'=PtQb4mOdB#tpsoo]3`\n]YJ+%p;"f'jMoC##j1P-S_cY@ikX?e?RO@m7f#N+'>=nik4<c\9>3R#&D31_#G7YFKXh26/,BT$QJ-qo;*4U](3ALPHqcWcYPgWK5bEGD%Gl4$J=?fF)Hi6R];R*O!!rXbA46jU>hs:Fas$=X]@NRT)&)KD^p48-K!-^kEcVsNL`d>a?/C%$%?EIn:Sp^?RaSof729p]^`p<dT%s1p=FU&C<Z2kq&gY8Br9>'gUmZ57u_d]c5K-5Ld\:,a'X4KqRNh8p!D,@D5o]H*m;U77*o)$m(!Th6#%atkYLd16Z<nb\(H\LEoX%8(cX_k0aL+[N+M1f,BURKP@u1/==s)`k8@L.HcLh^JZefD<)NHEO(9IcA=[-F75BVquEHq"%4S_3a%7U&#.*]fZ3At0e/Q8o=s:Y%rkq.,-L6"WcgYlA_i(_-jZQr8FM9d/nlh(fi/=.\hVg2I2d:N]Q=,L1DK#6^kWt0rc&Sh*k0rV?bBu@"I%eOIbuof(oI8d\X]t%d%Vn54pFJdu)pCYT<o)0-pFaS_0*_e:</lR^fRPsfiT4PPK?">\qGR7@OIVhJ'G2EP]C7.["'nBab4F\up3+48t,IB8b/W?9AUFg*/%R:7sjDj`5jD1:_<m+L>M+ra&k;nIHtPF]:63^dR`ntb8:MhrBjCq;MVM+mO9Mu/g[#2[M:mm4QXKI,AkH=^hcd]:L[TJL0A5t`dE%h0iF?!de"(5aGYk8*IMYWMe6MAL<[g1/i1@fSOOiTT^\r8\[#bE9Aj,N5>H)Ysm#dbfl,9+[m9_%b^*4EeW5JEh44\*16C^5c92I%YM27?bhPG(5TU:oQ@ri7puOZBcENX+mE*p)ZIVU<TtJ?E_&F?!#C5Zt?A2":<'4i@_ja0J;nC>]I`"`.AnLZ,&[XX4ji0KB+#+SK%nfBD#>i#aRNPIL0C*+\)H%bs1pG,lufLc^c8inRiPPSDqB]41<bMQ!mqii4>k1(qC29j9)'As2@PV)n4'%fk6*WS`jAg7,Yf&NH<%A4,FjQ*:InLpj&kJbCa0eStUSVRA(fbrH@mAWB#7PMN<KEm/+kq*m<sYAPp_*Mokg$=;U0/>R?SWtft7D\DkG]DDmKP^[.UlTqc*%+O#Yg*ZH.Y,7.kaStoq7963/@7!<muV7U)]be8CG\JL=7-X\p:%iAnum?n\2E1'"USeHh)O:">+^N(gF"#OfqNMYR;kM"_nAF`Oc%:)ei#Td.#qG_4"jJqQt/_^K99/JBcjT^(GQ2XLBaH;LookECD7)@Hj`TWE<1QP1gDr[a"79GH;b?rTaUPa0:ob@'"ip_Es+WZH>3%I\"bgde7VYfnMseX!fsB816r?Rrge61_Gf5EhV@,)q,[iSN9!8J5qaL@C&""l(t5]8Zu#BaJ<_i*/dT3Qj;sEEfS`#XY](QL<CY!%I\bKBknT'DLtqGH0Tnci6KWW_[_gpNe&tkKaYh1>;Vu;/]8uHj'tu-LIYi;%oRV8sK3c'SeW6=S7k^htJbAY7QaNVk4,Pce]hYVj%^t2Eg&3\Q%JGAA,ZD2$*BYRT)+A4-hl]f?:l0h]k/,BTHXDB_/+<<nd`+1)MD0__g;f@kU(]k#hU5Bt(^n5ZCWAY;%l!@tja;^gD%g!HeA1Gc.`A8!Q:VX2L408QJEl)AXfa]urRMY]82Ag1,iBCH<IY-_SX5@#MNlQEt4k-.ng)WKG#*^K]ViN:an-!U9Q^4>)lO$JR9%Y1(ZX&fTE:9r?X@k9;W?[.Lot@!,3Q*!HG+B^mhhl[E>e>2M95M_E+tH6"#lJ4Z><@,?4Y7:`hm+77"6[f$Wl,S.mH5j7kL3YRU;%Pr58E\_](0Z/R$ZEV>7##HWhrql/JfDl>Zp%3q7rVqU8ISsb(-+1&,iRfaN[0eu'I_7TPhkdSnekCu@1/,)5Q62/(s^;Jkt_`h^?%][$U'Fsrd@#%)9/?L79c:Em=#pWZj65I5]a1G8KcLiUg9)_0J\R>Q"I2mKb<N_au[.CIX_rlEH.-ILaH6gK!'/m#[fVQ'#U`Enji%>bSUqUjd;BSh7)]HQp)mUqs]k)VD=mK%K:,OW%J<\.nW6%QY60r]nU*&uTdDZE(ir[h-kAh"J%Jd]6+9)(ruHr9Ypkb8)IF$7qJ+%%ntBpVkQ1laKfEKa-r4YWgXF)lTjpV7r>3IXAZ`#pjD>10,uf:b7+_s!MkRKIaQMa-ILc(U"+\ni[N_sBKD>jE*A#4.iG[cfmNdE%$!*8Y=.(S,Z"W+>A1[6r[H'/`-'2WG0"DWs)NB8L^RnA1-9K"IRBKDH(h!%po49\'.W0=l>QJVFSIodP_op(5nH)ojs'@B9Sn$+N%8Fg5JXJcpAHCa;]LjI'%*"Qkbf]RV^`o:`\;jlnAAora*\'=UniA-U]+E6`*6\[!b*Fn]u/43sGcA,?pXPaeDguR9RFcaXC-h$2s%e!X`X,`JMdJJ]</!K!=N4KpkIp`!<J_+R;,iJ#+k=2"RgP1&)dIR<K?9O;ffp]IC;r9cUlqq)(Df,nLKB@pA;Rs/d?pn4Xr-^N\S%QY>ZT\1[m_9_=?;\"L3.PXFodIm])jJ52jf$!\WPLb[6TT65-tlU!mt?Y3T"p+/i.MGMuSCEaRtpV8k=>JC,DfeNHN_a8iH^PaK0%i0n]G!A*Q`9D7IorraB*pOS[#2^.#_>"la1",JT7mp/Os(;pji+Ei65gB,p;d\$b=N#PS%YPWdX^]ukPKc?o`*#c'%KS,I/>&O,+%>Ga<nmV`*6d?>:@?s\5*e'TtCQMo*bjpGM,Mp><<gV=W;Mp@UJ]0bMZD1m,dW%+\!m6B<V]ud.u@/g6Lq/XSsZ2KGQ&)Kr-b)/T#%>M`(&apnm+rh#AJS4H&Vjh6>AXP?&Zq-HBb<c7+pG8,q?+q`N_InJR=I0Ea@-PU,\,%Fj6d3"Ye)19ciAt^V'&paKU4e:T5rV_YE%@ZfFG&k7dUKX#8[U/4'CJj(HlWT^K,(SA4tn$aBjHL'mD"<+?jBYf^7BkX*PU*'#.>8l/*T=H:*Gg"HY/V+.%$C\%j]u-:*9cVO$%rR+md.q$_AlC[QO$oUjIcQ\+Qk$;J5\rIZu;U>78?c?OGi?Z?H5`>SDp-M-AG=GPKMHqQm?CEgF=]`\W^YDlAR83+VFo48W&)E;J%h/U3XpB),Y.(sP]h+SgNElE-_>(WY61rU_X@RFHAk/MA'&fZGqU<u.s]FA\fIm2G]&:qPI5)+Y?s)`VsgLiJ0C+[s@\rtoi]uc(,%)]uALmiOq1Fnh2jE:$\epL&/^SDf_g6R%rr-c6^oolANYaFBVSFG2"Xc$[0o=\@m?f6t(<7.Z1Gs8LaXU@AQ0_N%GP^5na`p$"qu%>@[$BW`j$JY-B?&09Y#QQbh#IAs&E'E,-BokQ4?*h;XF=W0DI[O*/j<8G50)?k6IV#<NuN*obl50ON+Jd`lgTI7T[n6K$+RI4*`C%n.d18:$tRa'5_Rg^[dQ4m479=dUI]>2H6f:1W*oa]u=qOq8g$koZDn%m3?!)d9eji3a_7A_$Z;h%q]0S)5"++rTcoB9b`5nf>a&V%!!c]o<_#f8DPBoorL#f-DJ2)[jc1*;,;(/.bV"AgD3bgms4c^F(c1ZB(kM^rlm+p.!@[Z^]Lbk9^tI<l3U5;^e'7s<M%Pgmj+17A%!MuVpEa5r's$s1!NN<G/V2A*^_pD0A@IE6)8\6>/4hb^XTda3RE&Za:DMh!P^&F`(*h^LOm%t%DfRX3Q_5<$?bOsc&1SWqEbDJ\K%/+!jbLSG>H9Bg=\;-%Su9U]4LLnPu]VPWX@6uq7]=(fY\Nh5Cp0$/V4C"rN!?R\JAJ*/H`fXZp0er\0&0QZdWIp<s_qoL1='<91V%n=lo2RI2H\jeiU-@.,2k'j4<ne";gSS7)\Jm#QEDh"[Pes/3LFY/=Z@s31;Z?N\:;-^ais.pNX86JM(FHXK`=K6cI._>TLi6%AoP%MbfWriE3fp46=SrH$oWo'^e0DhT/Vo\GpT#FVXOOSM":qKra.tZj)JkYp2be7DJU(GC^8UjkfIgJ7?(0]IEk9"1f+VD4N.1r#$/8%VbD$!(bA`H!acCd/mfod`Z>6_l2=+*Fo3kIk_q2kBmDtWph/4%(#oC+OVf5[hd6?\^:fRA5W9Qd]1Oo@8id$'2QA%UrXW-..\dXE%nn8ljF+8E0W-DA#IEX"Z;=XQVc"g"[_DI2Y@/3`-5&XD`''?JsBinI:/$TI%No_>Q:jH=I/:[@Y-Q3^?+h=M8QWdJj?l\=#UI+9=%>X/&a!f_RtNHLH"J((?<VL**[s&A<YcS)8ObkT1922'*NlaRtYIL24]>.j-+M<CFdIo_-"7*O_Z=Tm9`>[)X`,ZN!H].FfL[Gf_`%3NG$\YLt5#?:!2q8qBinO0ju<'\F$\<9Ug3%/pN=CE-aB2RB1&#@QWqE%H$]b$_0F<Q:E%CB:.`M:WC)q7%$0h]<jQaZNKhlZm:+%Nuj\[qaZ5lE<%]`1#V3OR=]nTG&'&F@UTi_k/aaiW_KFD7.)knoKC/W4J(MAecG)9d,j*1Dm5geMuKin+8Cq1n[YP*JKt;L"'6Ur%XpBa$(\c5?R/=F@"DhT86S<XpMKt2^'j)7:&O,CbBNHpp!s7f-QKm+W*ZP*G"+onX(*]bpk]0spj@:;6e=QsV4>$Y=fJf^R3U4-^%@XA(Rj69N*bh@a]%*Y`Ya&[,^HrfMm2@RRQee22nX3c&Rrk+qF?*MJ<'9s5>HaD]HH5f'1m0j<,q^*KfZ='f,Hm0OpW[nan66b&B%,1o(-hrmI[W/!lpbkpJe6it^Si>k;L>#8cSfSgd^m)dI)Il5'r:G`@pUeKGs1a2@K+]T`5Abcm8?`:PHpqV7KB]K9)NlTjZrRRO7%M*Rna*ukkD,@fb4L(C@$*YhChrO3IcktHsWX;X>P!jFEP?uH%]B*Q?JJEeLTJoKL+%&[K5?3S3BFVkAaWh_!HiP'FOR#%Tc8c-\u%b&]RE$L^IaG$(qQh(/Pq'ECNUbognj0FijH#d(GlE685ICL=(X@Lt.$Zf+R-/J\Q+0Nf.@l#ke(<";S>!42A66$P5J;G#t1]UZ>;%)S"n:J'=67JsL9nf?Unr`G/(.@dOo=P@Tb2*`EuBqc]u:nX*O@7C;Wr>Fn.U4Jk)sRhu:uQlEY[(b/ER"-:"+\+[Y973`WHc]sH[%#!jO:4okqm(9+&b.J:RD\?uiBJO[A.&mgo*Nf_f4?FTbbj96>&^gj>O2)93_J7"Sq@pZ(pO:J.2(pcHZ0tOYDG!c7<6#Ie6!bY;R%TGSX49R5+Xjd:B:P8GEX@mRJbdJ"XRja+rT_:M"c3.(IWe6^QD@SkfCVjHP`7s8KHf^Mogomq%$P%+,O,F'Ffp[1bpSK0I#lOOE'%kh`khVJf=>ou3e^fJ#,]Qoos1]H#?mcfFh"'%uE&AOO,69Lp&`=&u"L)(HIAGuqFVliMC]SR+$AnI5uaYdrWd&p]8cQgZWkZClD@%XU^pU7\lC%O?PbFoToD`clE1.FFNaXVa#k_?2]"hN:!r)f#^;^=NpAj44D`TH%Etj,/"maE3afO#ifnm%Q7IqkY-1GN%A+RVA!CP%LGol9Q7QDpQP&B)j1LmhcoIqL&V_UT6pqf]l&LFZ,n%jfP9A(%KACMj61=JM_Mi,2q1[+r^5XhEo'/BTne*)H=UO'N'q(*PX#(%l%V8G)D=LjG[G3($%LY_h=Lt#T4q74@?U)&f<));<_[J+en\QRUi`A.[7`QrILU:*C2Wu\.=/CKeHMQ)kgYddMsKIK)'E1'Lo4;K&r%*>Td06a4FMa@97@*^1?`i9N1)aP*-OIK4j]OE$gt,MX^@6J!7>f9pfLk6&.NW0RB*EaT8AQh\Os*G%<:Cq@P<2XU8HO_iS$5fkUZ%*Qf,Gp@&GhVgkCkq9#n9SU[uMFgPNOFgU`r5?fc:'m`FXijeOnN%'^ghcat3Ye'J-LCR,qOq%2ocA+QOfcaqm%]2@r0be2.30"?'%B;@\#k;1WRFZ2AP">o[/=bK)A3WjP1Im[V[+%+f`l#"HJ"3O#uLUB2AcsUPW#ii<>;_^1Rg.8DP1E0X>:Wr6l99W`;(6sbgbIO'p%ImfWlV7kF]&Q]/e!ie%j!a@<BZXD756d80aqsWJ]hE2\m\bAZ)=qWCta3!3;nLMSCDXW#Li;Pn\k%jegFfgiNQ>JZXVRUb3"7;P;%RjkEYkQ'8154j%\Sl5sP%_@7#$U=HS:I,ug-!@,(@k-oI&`<o74u\l-/99e)apL3&?A?=W9X!$0&RFQ7Hl]#kj'7VkgS/'!fAl0Q%^7A>B$n;6''n+=sf^c6S3r^K2X(QcWZ)qdO$SP`;ja;^rP+V9hB_[R_:='R>2KN@ugkiLHNco$E_=qndKI*8=e\bHDZhOj<J]Iu_%l5^Wr+r`WR"\VikH_G$IkHJ:>oqNB+GHHCeYqTM1<@6m)l2'&?<4$BXkJff'*;<Y]<FND/jpdkQME?nVOf0C='!Xm(?2nRAT*[WB%%[qQlCiSgF_a53PdicF(W&uraql<QXP:=]`-<['jFY+?_CoY9i1kV4aFY%^X9%^!=9=b`t[aN"='_CBK.1>9DIJfg_3`Emp)6=!a%`+)7b\39?VbU7hsd=\RF5[ls<nODinS/XIeDrUFfc*[>a-69#ol9Gq@-`D4bf.b^"bmhM9Ig\M%NfS]llP@&e[kSSb7b6[?5P<_P%#@M9?GPH?;=4\>oc"S@!gnS6Jj?@R*rIKs12BQW#Qq"u#k=H9\/Y""E/ZF=>Q#t$e*tnE>"Y13`nEN71(&[<5?-Fl*.=E:<RtoV%%39YE"%^9!o7JEO'E7$JTE('*7^@rLT\JM5\Spe`SCPc(bllZ#\N<pLN6JQnNU\G[*9SmEZWQQSWecOUL7I(,S?8Fe8VVg9oN9!No%0t-GU84*NrXNdcPRXjF.C30PWT/]c)\SaD-6fr6WZd67CgrMX+JsE-[Y['l.80^bipQ6cHLGIdLRj%)=k!HlFn9<:]CN,(*$G;Pu%!dYW\^.P;m9s5Ts"St"D0PlMLUDUPJ::T/Thmgi)85diU.M?b\?qpA6Z_[*jPL,!bIZH!!#mMG;r_V5^G]5U%/!?o1MqMS2i6]Gb%DS53']PT!"Jg/;Pq<p[o4$Kghc/BiBi5V7S@PJkDP2kq_Hsl4IEkH$p.WR>1(A[^p#YHf!E]uREjHoAWfFV.q]nEm\UX`FjL@o<\%s4Z=`9t-ps')i(-+,\HhJ@:BK?]aeEERT1F5847_)\J!o@Gh,DTTB,%Eik/=N*TFX+#rtH4r!>DIWt5(aN1m3[iohkq9Qc#"`F>3%s87!;dm*lu_e7j+m2,dD;Uni4o0N.`,-??2IhbOfr'>]$",8H&J'?lln%[;!ja[3O?iB5mrq::0npeqls7uH0Qi?O6CVTd5q<h<K%qYu$V^@Ho[IK(DAQ::'*>9A<,OiIDriG\_`gLqR5^QAHj1Z.sC`1-5lM-O5UkcO_79i'W?jbZh"4#K0HMj>a_I(ih6PIG4N,*LbD%2*H5CQ7(+cjIMa2]`6)*:DU-[f;9p6dIIFNHLKMYj=OQ,=?bq11d-,BQ7%bmhQc=e>I6Lq2q>Mu4aDsO-VI3[f;9p6dIIE;&+A0C%j=OQ,TOuV62Ec>DQ7$nFhXolO61<7m7!+Z;C3oIM-au3hNq/3):Yqi-agFe#+4TrDrD.<VEqeEP2a)GEQ7%K6H,ld0msfB$'Bt2G%:/+O@U?)]qjW0h^]LC#-]D(0ml,d/:4Ft6>N_N=+U?.6a^JBsBQVT!QB=,8CahMuHiu`dDTB_GbqYslYIJSK!:KCol:S,T+HlbKE%RGWDcfD?rpm_qtdc[VK'E??.so[-09qV[jgPOhEA<;WH:]_CMPregZme"=;JM(aA;S&YsO^\5@Ea!4Ha%tAgKK!0FO^@9T9s3=\k%StKZn3DZ;Vhu,LO^AlRsIep0R]RR(Ul<BU=MJq'B+Dl#kV*B=uD+<VXP`Q8JH4cV<[GUu=ic=8GnSpQ)Ps`7O@mZAuNbr/&TX^L*%]^Q6t%j1-7MSIl'n5"KF(bMWT=[2CKY\)p^i+M(O[KM(/5"Sr]HGO\8aqr>I?p6er_1CN]T<JHJn\q.!_Ns-OmkJk3/V81>ruj*!%s5Q&A7;"2Xm,N]IT$tM_I.?ZSo*:#KWKn5^r6Z&Tqo=G9]g[GfC_iXk[hphVE;nY)bQ3,4s80QZr`r8%3ha=g]B:;B4b(Lb8F,kk%=NZ,AI/![[hn+7?47%FU*:D\\*C'(b07MkciZ=e4#4$p<#DPu+"okplFT:d8m@kYNk'nTQicB&8'<hGOr6=E^NPe">H2lDTHlPT1%^%Yt^DX[Vi-iSdk_i#W3:Aj&'G3WAtGN22#qV1TTq1&?*%f[4BeDH"ZT$>*l+N$>2Km,Nr'\Qes#E'(@MbEMk5Q9uiTD8)/qt`7c%Cd6>H#gjaok/MiJbQ%8r*VZuA)paDL5C0O2m8s;?O1bG#c[R-urN<@#qKG-h\B]fJhKE<=NW"4O\\u(*1B%&Fb&\3krJp3qJ+^eD%"CdKNDu1F0puB-e_XDtZ0/WB^&&&h9kqg'$DXh4MltoPr2u_gkknE4Kd@W4T97Ge<jYm_-q3&LT@D;SKUAA/:pm7Vcs8L'a_/A=p%Rt^j[YN#"@<6s\,s6:^#&)QQh5CN#c*e*i]i^Wp<N9dH+r]seE8pu\kKo#L5qS']B^2lYiV>fN<^\4)As8<1gRst5\)C'\!X&&+Y%#H_X/ka+JZqR?Hh^\I^kN88FMUQ5jVJEM!QVOqm*JlH:YPP7;tTS2>Ur\T6?:8d2L1FPPjednBn:]fK?)t^$HP[HX[?[@OcHZ"f<%^#K^Mn%BX#n6[&jE+3-;btnO(peYbe;[l0'+9H"%5LiR5RZHpoqijG[8/>+8qGRek?m(&$S+tK"&K$=CpYMefMSMK1]D"MN:k\RO%UUkg@;[u6(+Mur]T5l=]0-aYH5L!"->0\#Yn7dV$OJGukkgKl-pp9YZIi[P[^\Wj1q_3Z7pYK,qhgbEjhkI'd?e6BKq88j&oG=tY%rTAqXh8Oa::K[Y5J#?K=qo&Mgq[2id06a&Md/3IGqqKh_++E1P55NN*Ier]+TDnBt5PjS.n%T.lHf)JakHDX@s2B=&qnk;bcgF$0%-51j<7^%=<*'tTn\0h!g]5[dOli4`o+*Y1IbB2=rps]Njr*Ijq3kMSFlh6UQR[OZ_jE\`A^\ZJdd'kXg5M,r1S+Xi%?-n)Va)M('%qu??(_u5WNqV-3SVM?"/^&OaYp/(58gs+4f6<SA/jQ;QCS,:)O[4h/7q)W7ds5NIUGG"mek(dZ!lRk<D5&,$1iF1f9>$6?N2J/uT%O-ihG$%M#reQVuP_]8!W9-#7Bqp0`enU@U\Q[f"h%mS*7rSGlgC+9arN,nqa&+Lh)eCS=QYg*"u`gT)aS43W\*boM$6/eNX0a(Z5%+88QT23*GoEu$IJoau=p@1Adfnj?](]-fE^U%D/n!&W9mf,oZDBGnRNdR.l2'8^LmdX(/&#YBciLR-YGEd]?!FpG,s96f@r\T+H0%j?+-FUUC>cLKR*0WO3W_*j+ZM,H?N++'Zk][FVaDr:os]>3A1t8.Vh`aTjc5p2mBsYB@OjY93P4a#0KXf7Tn_N4,UiT_3:Ln2hYX%+4?\Fd=P@k;kT"j`bb7F=eO>df%I35ijcBblgr^"((&'dr\/!2*_Q+!lW,#[QUQ./XiL:CPh3Z&BKl&df!"37ctAmZ>*&(tGN7[M%/Sf82XefskX4ZM;$9`Zd46+n87"&cR$VFlqlPH`X?!un$b**4U1%V7-YF[MC55ELsnTf;lF.J"iML^Us6'Z4,CDr(a2VYp;>'ieg%SHT8#O(kALqo@=6bg5bWFYSr\ggLpq8mO=p5QBktV7"S6BEH="kY?j\7%@n-D@jm@k@HVV!EmVigV")?^lKKa/@()&Mm^CoAIiPi%n`XF83FsB-d6K2I4$tXV6.jtEO0=miCR.,R;dJuU,:2U--QVXR57D"N32"Z7\j1*E#FG&$RUJ&oRat&tMcj;N19W9h6%1O!*h>11%1"Jq7j;(B3%=h3-#1ck@1qW,K@Zcj]5Oocq/Ja'/RLcCIkTDmV\bG@/Xb/cWWH*19@M0_c'@(!S3+E1uXC-_';qt7Uou+g&E\?/F%d>*MTK">r7V=7pg2$^O3MUqJb^:&2eda*D5/sEKo[DaW8idr;@F`'g@CN2MIAfVYn!jpO?PeNN5D/hl#@F9cqV$>/OX^@KS9*i%@%%$qdGg:1r,$tE!@coU(,8/I=m^D@Y%MPCR/HO#aJ+EukT1TY)+-?l%dgoZo#r]oekFk"TJ_iJ#gaG;YL?VB^4Qh]pD$Z(-3m75nu%+$KHr80EZL^(a?q)JHgq27[]R/QKQ-HZ!JI*MaY5^B%<*j'p6A$b49dp3qMJ!3VV3IVqq,iuTgQ^Ir/I*gqB9YO)j)?l_8`T?el(%Sr9qFAHF\Xk-*HQOu5K$Y5RG<RghN+!^#FaUX,!<H>r?.A9/eS`3hd:ERB%"LsS="n(cu=.rr7CAA)'ic-;R+6+RMdYFV2)[$LIj%2CB$"`<("Y%YjT.f0WQPS\XMoD4!T'mT<be1h+1:)6W9@03blX7F%6B=cYHPTO5E:Q5G^I?Y.G2b]\8PERZbH419$heuq0IUo9Gd%o067k$f3/&mp,G8\pZ4B0'3WeKC`IEB>6QRG&1H1/XLk@Yr.Y#@s&07WC>eC[]g7ip")tNE(Of>L7phE+QgeVG\G4BOe94fr9>F&%?G`MD"5!"DO'JF!oFHSP\";Zb#KVT.(MaCaVG`TThR]d(!@54hf<2<B>#9bE\=b-uJm[K"l[`<=aYeYtf;f[.(O7g$JWi&0j5RAJ%EP9:WBMBr_Zo0o0UHJpuc4I!&?a6bJ1<q1O`H>g$*jGk=h"?8fFh0R\\\DbeGVCe^'QKO=Ca#$I.+\^Uf9I-5pB.5#ZUBT-Xt:a#%cRVe07>Z/>CWY>Z(V0nIp@*[bG#a)a,]1q=Cc[]cKP13f&,<4Qi8QV0>_h7b\jB%@!A[ZSk\I@gdO3YbRs`,l0fs=;@@].b#"F<f%,J@-*aHI'G79+uaR5R(KqgU9p<$.NBn<$0<AJUtk4><f(X^#W_f!%$"`Q<@V*(dQLVHK@L*i7km><K"AlU'EcH))=]`*L1rm;b/F%5.ol;CJ8ReT7\]R$S:?.'mAeCj]F(A$h58E`.<(t%WJ6[rAE:F*Qr<X,`l?*8#E<iZG8/W^V(GHi`/*Cd#uH3<>OfFo>9uP_k,Y/%F=_"*R2BA^$B78TLjH-U9_0IR/.E<anE$36mu8o+7%=GB5XB:;!>OK1Sd?N\OgOUl-\/:T/D[9%V6d_Cp"d]O5;qZBO+Z-YG^b*K%U1YD41-6.mQeD2=I@9KK5?ETAP.Ofh>+Y'C9[00`qr7(M6X4unhW=?=Ri:'D2po,_NO$"bE<sqIAVX7@?$8bb0:\Nd?JYc)l/Um)%3Cg*iFjJ-L_>"TuNYK$eg^"*nmpi:G-d;Yj\(I+9EWAt3`Pr@l9Za+"bM\(ab)o`:%3XVGl_:@7l%:]c`FA5"01ZEQo!/E5Wa6(,%)Z+U]19FC2q!/Z,(,3>RV[5M-I5"XZOA^5JH5'thP+!K%'X"Ar\bP,]F"bm<Y&Gbl7h:tp3`oimLHsUnN5JoK$Jr@3i[P]Xki]3j%_?9?`br1g)E9sgglW0l0^NfPe]^C&C4*@oQgQ(sE#?a8g;N1JJMS\Qma#t8hY@8jE&=s*hOa(qc#[cK>Q>spH:Pb_1obc<,@c!S-%/[:ZbYcq8fW]Xbte8&/m"LC+!kARIU.WmcXO((sdi[J_]/s)ocB=XT\50?60;.%`VCD6$U,-/Oglg+b:WF1X`SP[Zfl`DFn27%E7%Fd81HQ>uAa;Xci.?nn,f!sB"dn`>4!T_a'3.0h`8;W>e-/j1E0LiM@t?#;>R:#Y$<`hSU(j*U`ri%N5Y2m.Ag'^QXP1rq.pku_C%%`V63OVD$:?X%>s9"!KQ3U!cQ^ni>DW=hrMF%njdibC.(:0>S4tTjVf^F<I4hK2V@ZeK\kGfDA-$#INgqFobSm#LnZF+):qJH!*Pm%ik4%[IH_hH5jOb`!am*-\U+D)1HcILWqF69Q`R_U`Rm>!]:YTVM%%[o4gZ76>AP+)O09-V^^Ir+BJYY.E]Lr;e`3t@(B[kKUUqrT%9sm+ORf]&tA%:g'piCE_1H^6'ppo&Z4(tZX%Kr!4-$-\K;/(5?_M:L_)8h>;lsu$!KfS<J5H8r3/j2X72!G/'67lLf!`Z1V2(IqY%oe]8=9^OsPpVod+B+NfXgZ^:ro`>58/_>2!E2M\"3"Si`(\nE5oIqB_$3Zi2]c).Nd=GQ8"<UEJH\!35)f[l"Mk@&+jZt:F97HE/%'+/]qEB:""U%Nb/"4R[Vi;1-`F3I28b'k2-8\)Lm+?GYXCE%>jF"mKqoCMkNQf9`49NTYVcm_l'P0O,MY(#1C;VJVl!;&I$7Jnbj%-"pa_DRZ=dom1njY=j2%Ei#=5@Ah87E@SYl+'Tr?U<\.7l%o4;YpU?PRMc1g'@rpj)`jeDQ[H-lc]rV'9U[Pi/DZoP=^VITauQ-T%\dgQoYhrhDVONBO]'Ck5Ro`5r^`lk8B"AAm=.VLHq:0fMJ$tf$jgpl5K6qArbM?BI`\lTgQXAJMiSM-0`]\%S[9;pk6-"!V[5sVc%l$RR-KC$#%aPjTIZQ%?mQJJ>(7+u5<:9HpEYMI\ub[8QhYQT:=@pPV4"BZNLPc$bmC[nTa<@BQ-<6?-FkJY%=JLcjp%>%dn<6KW4%O'@3Oh2fDm!>!nIb:o^1$HK71<h",hj/$HQ!*<JE12c*!i)/]\A8=(\EU9Pr[:HQ#).qj;`\49KFI//pO:8Z?bLL"+l!9o$R?kVl%2OKQpd]T@2gf"NtOVGr!<Ls0dop"(&i?QrgmP6G!Gj5q97NKH6:MX[\QMn$6eu^;]QD^nC^q:Yoa?(p]:EFJjmC5mqI]O8f:M5<>%9K$I:=<)ugffQFY-*R_["dbYu-6-<1O6;1m*>K?1qMcUE=1V<8*8YWQ/n%rVnq$BL`3H;sJEepT'p$Y_FW1u8WPhkkaB,IBYQ%BR%O[7*%c&GIX9R)]n,TZ=[6RS<o^Oa6SSc"Ij8!jfq/X(*iM4A*j0,t/!.b>-0$Fb73;Q41Y#%;-kI+cbqAS/7^YM[J.!%;XM#MoA"%55maU1D*gaPRjnc(U%+Lh_M]E9<O$XhEa:XJtglPJW$MO\9M3Y.jXS`GZ=j"]JuZV%^5BDdHM!e\_'YdaMe?l]u*mfo=e`PV:c@I%r$$B=53W#Q9=Mpl`Mq.E2:6O_nT:jLD/`o*W5H'bj*.^.b;Bc6bGm7*1!:b=pHCt&Q,K![A,!2`oeGMe]^gnTjrn+'U1q,]#e0-T%^2Y"VU?eT*Ct8f11)1i9]EKKbTT!e#4L5>$Eq\NK*7VVZ>/ESp8B5b)WpX6uf.$*<hGngqa_iG$+'lISe9hgaRRj\Fm*'pLb;g.B%n_tL[Y3smfZ,TATftdpF0mr#t[0hV"R0A::Ibip2$"H9*16\31M%hhW5]W*Y%%\\g68F9c!Rb*!Ks*q[DF(:u_C$#8a1T2a6<7`R%L,WL;E?P>ISX4/H8UIE^GVjU?2\nf&KfDTRrY]@eM1H<dL]n$dY#<emPA',6#c;7@IdCJXmY=jAO4>NeLNn4pU2H,6'DNYqiNQI!%@5G1he2$D+p8*"U*<SH%\gB+TY>#h8B!5M%[s!<lM=:sKP>3TnX,=)prMscO]eg4M0SuX]Li'hTY"rK)2hs!]XF80q$(I>ZGO\OG%hp\BM3+93,=$se=SFo'Kf,;$#m9<'k/_iK6:n]t+Ha/M%_=]R$nc)?C$Q(@'Nn03)et+T*'764e\(bjLn^6ujc$rnbgB7m:@pYgY%iuHT$X<8cD&AcVD'tRY3hclgZO^0@u9a2ilgn,09/2TYKn.7JT`H%#>"uIY&MoA>p.5&Dn(\<p+,#$P#GqrV\WMt.EL;Q*1hpp+2%jM%/_0SDKH55^J<V>3o6dU!8*fdN17.nj$tJ&$Z%:n+UE^$bAro=WL.DWa&6/%;FbQe)f'"oeTG9XquX%U3")=r7*"?Fba8-j7qa%a<46o5jO=o_B%nUTuP(mVDj6c8=hh:OjtO\j-\-]9aR$?1s#KPTgBf*`s($_Luq'"1%lJSS;@'>)rhpN)IU"u/M$eL8VM"q`u6T3%VLSY-5bgd(OS.r*Z'&fXY&J\&Z.]@CTsg)fIn&I5@ckX49^TtpTku>,B)6M*jfWZ?>Ss!601J1+8Bo;Y`:PoCNT&MpR*R1?:Nn6K%JDQKc"qnb<i_g-N.-n;`Up.8n*I\#kAZ#5_i:.?jc@]L2)4!,sYsn"]!Y&uA\<L`*7+J/$BkiHC68<T0KuRY4rrZn`TE1BA"1fJ^%36m$t'[p>M2EGHhTJ4bO%Dpie"lJ>Qr(;phK>2W8C2R"2WB07bPLU]Z*A%M[?QkfS]HZbepJQgX`Fbi?2NqhjX'S,&,;aI="bFs5%nSY-J+O4R>AkS._fl2\MmO&7i@oa*Lr(*K0q=;='!$g&<jJk:*]/Yom#[s^SHGq"r=eJ_0P4@7jksf*\TnW&D0QI2*XJnX6`R5I3%LDo4]TrE[\I0hD,C`-]'0g5d\j<De2+M9P0hf'*!Lb'SFS8%L])=up[rcI>%@'b[\m1nu$6k;-pP]`?8?X#LkWIkFC=RpStTmfE)%QP_6r`EUjI&0jSuRTs_9\kJg`Vi>DW09$LL\ai+HX4!@d5u3:5if*/RguA`D(<tR[Rh.[CTWq2o*`VQc_n;A"C)%Jp'Xf2X\;W_?%(#@p*8r5mo&QiMnp,p'tEm!qj'>NVo,pW^QXCpnWP+`JH4Y2s-I,[UHQf-n\!9r>BMG#^>Ye"E;J1fQPXT;bO4>^<Di@qFpX^ULc%&\A=bA;lHAZ6=BMG\YhnpCNMk%VK3d[fsVt7j$a=E"VA6fD^Q@2^%0!DR9c,Omt9@SMC:.-b+(q47He1n)QW">>ij6hugeW4;fI+%6#&1m(H'nLf$'),=L,qm?q^g-8)^DlZ1r;Z:B.2P[Pd^]_7uV2K:nT,kXNINCN/ZPs'oG#WOD+cQQB>=Q!VLBBCj^s44$B)6Es%U%RI3^MgBqVM.Me*hJQRBbf4&#>#R^+M5,uSdkdVopNM.-@biiUC<T.2DG7MjDIV;4Ci$/'k^3dR<=hI-A9:1:%\.Bmr6;\!ZCQ,jY%`5sI/.<L@bo"4hRo`K@;P.ilERi:#IUaj'<p=Q'f6ZrA#S`\444E&l3Q7U*taMK02bf4d-=hh_k_.0i<#Zg`-/q.b-k/05]_$!9S%%`0\_&d\.cDV^"d7tBUI>WcII^^g@a>M&5E+D`)X&ub@I9R0KTFE&D8Pj2^[ENrL?eA/s^+G^6.8i,K-7\?OSke_>)(6i;fUN%j?%D<NRhU(=aK167[rhD.KOA%jBMa%sFqn#oST+CX&[d:#=H6S'.tD?EL)O*;OHf/@QRRtIF>ecV!^(lFifqX(U]qf>ZY:K%]`_OA"\%FR28o6\gq0$R'ZG)?ar^Qs1u*EJUq5h?*R(/B^]?1ljk1OdDA%p6G0O(2-K1Ke4o(-.Jd8Y5.(C.qZn1lT_GLD#E0`$ZJcXLbO&'%`69sj!lW<!NX<YFi3#Un\,b&LhB-V5Qk:BKq#]Oam?hT]nV^W6EEtmbia@NX5pkR>!<W+e"nLMiR+mu3<NnOq+g=FFp(&"?`KGJm%Z98s[b0W,j[7c3a?_E2q#i!ml%ab,5Uck!AM'AW9bK)uj"q!2,*ABsf>#^s!/Ar]_5M%2W<fLZUqEgN!@nh2?dR&GF1Xm^)p+4:C%F]7VYGOFVlB0UV?]ml7c*iDW*TGJ\R65$A1%YWZ7JR8ha77/B3ek+=eiL5XNMqJK!7rZ,?8eR3d/2>"r.Q$c?5amN3/IN`,J<k)O%$<dsGIL^R!;+5B\$GoJKN0d&d&J76t+]tP;#rZZ<(3;D6A(ZLliq9-%Y)G48UC4*LKOX`[G_;^s^`)g&/R3d"[jF%/V2XW)DBY1r%itcl,[Lr'B$4`NrP5^u'C\E]O!@5KKO>16uV[)&iPA:g5e+%L`c\RI2Lp\!I)iZ)p7V#(be"$r!\VH=0*i-k)Z.BPM)q,.%LS*kP%=IURM/,R+X"Ra'Gb2=AHMr>?mFtM&G7R;,u4>-i=bi%9-lS+1c8?J=7AO&f[&;'Y34R,5tXa!3/>Npbp&b@u*[h1&hOgUVFf`jCM%)7p'j$\Y[P>TG*6>KG0qRm0OBfgF6c%>XZ'7,/Y?O7&27Dbl+7C*,G1M4eG&rNg#="U"+[1(ugeH`,]\$Gm@PLCaTG&@0@.R"R7(%[:I+DOCUCXV%0S'g^s\:&Brf)0qau6%`?OWjNPkh@3IJR">dpRpsHHmlng\t1^PmShAp2h-_%@U*dU%2HZTRDR^dNC#gCD!<Y*&\%PFEFCjk"fJ9Rjdj'qqZa>\8c)US*+N@6M3?S1=tuAfFs2(D_V%,]QlR`H/B?9=uG&MT]):3)R9cSq?Gk%_1HC.i*Oe:"N+YkQpe7%P;\<1h78T9&qfCK^o5kee=golU37IQjQt:#5Nf\iI6?Q`DXUpo<8l\[W+S?+8^*3\UVq5^*6k(]j_0"ESX\D@i=4I84MGudoP?fq%a?A2@j,h#!(t)7,=FcQ.4]G+X0O,b7oD8s:Cgul<(coZZ%3#C;rt;(\`P=0ic9N$I['!Ps.3P=N&[Gla8$"];Z474.O,nJpCe-4J%N+m<?&mq(1I.B$qPWJtn3s=>Q;+6.pKEfX'm("Ol=.U7VeohZL(7DG@]ehf'l[!ihHOe19@SgdE]/_OdN)3=K![1N((f-"q$40,-%FdoA<3_h.M!%%UR,W;@g"4H[2cjoD7LhYCm3RF;;l2X1EgZsU8TeOaR;&O,8jO<ZR#ZlS+RKFo>C(P5gbtki8S-<s@&qlM',_Fc<%8Q+:n]Z?)(!*C_^?+a!VOlm>8SPVPB=R;I(PI#TO8Dan!Gsd5Y4*kSR!P[`!Y+G_KYath\UnK^MV::ac8hm6@KQL?oUu[LlU0DnT%kp^,nrF("Z0M=V(&Q9!_._=XqQ"Y1h''2+3:lSF^p\@":VTar[,bCEL<9e+Hl_\8\[;e4Y&Qlo<]G3G5_B7@G+u\OP0GY60&G_24%2`S,R>LrF6FZl+g=r&6;o)t!Q;IRIUkGEeQ!WK+fhB<\5SH3,5=Ve_P9,e$*UGmKbCSo7@BlM+fWq7GV!N%`e\!oC.8I?V\I\W<B%Se3d9k:2hFNADqf;Yr;hEKaF2Dm<@T\tiN#EU@2'A-Dd[9D64aUQG!\KO+Ss/?r*Jc&Q[+Un!;+B2WJNU*6I@P"HSY?bkS"W]n,2%Th!A;PA<OISB&!@U[lM2H1WSJ!K4YT:=-<q'/kp.S@Wa[JfpsPAcS7cNLC#BLo`>iNfnD6;qB0.,316^J?W#@X950QVPJ.-F<[AW%"q_Fh;ZD?[332Ok#bc&goRnt?KLDK7,tct&]^N0V8ie(L);q@d`\hC>7eWY,$QrI.AS]uYa+8C?>sZCN:!!K/Od6UC6ChA"TP0,+%-,P<_.5abnYbO\]K?8=ik#uJ8#l`W)s2@_eDJ-4p02!LR9CHcEnSudb[F6M?'>Tj<SNbC1TNo+\,lmUUSheGCpq:NP+lsp,dnQ5K%cet&(Z>H*kj.Oh#UMug):=Z9<""Ee+LnS1qnZoN/_tj0n-'NSL0ne<@QBTBMZA'NhTuQqN$$;BS2/@#(='*q(au$r@+m;e//uCrA%Ss@@J7&8QMSnQf-UMV-!?^IZn$kU3PJo)S\1cL"P&rOaomfshm1R_.J=9jp6faWX5!K.h8QaabZ,HbIj;A2Ih9u=gR'&)H))/;HA%O!8.<-l'I5=;TONYU_$b'fbfrmf568=tM.]25rn=H$@?`-eRY[nA>5TLV]%f=k/pF`8/@s*@2C8p-`n>&&^/XML`K3Tg/a,@eZ0f%T]$\c;fFd]!3>Z;%9)Mur$G^5Nl3o12YU$j3<p`p)$@Sp-*P3[Jk5r@6gN['DETCpM-/F!hSFm\<,ctP84TaQFm"RsdUS_(03SX!%rehQ_a8ke@3BPR7M,E.hb4k#H;R[TQ17#V@Etmd>l4TgSUDX+im"Ye8CaW&7Xd>?3Jknj:MuW`53Rhg/p/3_8];M'0Imcd\n6-M[%QXIj8I,nZRASX/BZicI8;k#T''r^#s%h_!\2hLb["iA$kq2ObeDn7?YWht&.EN89Te6o4)AEKS5@f?n*7.B,$NMtQ#U+SI!&13=X%K'<>87M.9$"Xk+"FY[MC(Io6N3Q?3u:,%mKd=M$rJ5e;]`s=*`'`9q\`l_au%Kn&crI`J5b+Ad2%s#1b-Glm!eZJb[-$g9Y23b0K%?ks"X'`O5'5JJ=&dER:LP*tXX0\k3s,DDPmBKVFj"_Q16qZ%c,DLR3PK>NaS>5t=gJUG>Z(0*$k=B0WI_%;]1I>u=6FL85V,t>N_%oe7pjKQ<cYSgrp\^Va\tJfR,8Q=4RXH;k+._jUamk`GpJ2;)c+>P+0B2@3&cjE9?eHDFjJjUOi1STg$-3SEd,[YupuRt6-LifOat%=W,g]M?p8fF^+&.Q+P,M*.o;T8e3Un,K+P8qRG7Ka)8idTGu!<hD#pqJq?Bu[LNWu<mV7s!AiMnj==+mUr/B73[*#k4(9jg;0A1?%+Fu2nEHE*W)>YqF]*@(%+WHZ1,nRCTR3Z#r=\P^t@4KLsad7"r!jPof5(urS/tosYW(OJJ4s]UkFo`b=n:E2lb[rP7rY\V0Asin!%,Z,(QI?;';QhZj5H$o$RH0qecAAbdM8@Z@"7YX6]lgBIp25%J;U6CE`K2!g#"rOO`j(Sh9YQ+1V5Md[h3Brf]KQn)TB@/LLCTGgq%2L)ia#^6l[fKK3`\0"f:8`ZeB2&`;`jS++F=73iF].t(^9g^DNqB.Zj8r4&-;e*$nD*!WGXN8rsj(USdE'l=K:PA:,#9n,7nTOn8%61l.q6FSiR0"IY."Id/hR(LUm*lp=?b%"XB>^0!bJfD'h.`KDhOMa<aKHsH:7iZT$R04fM7q](?R-D!CgIq#RZqfTY^GB(=86s2(%mT#XV;(G:;/1<gYA>0=J2Go6^-2fg-CEZ5q"X#c0$*hJW+QhmoLg8puL_H*)#,u)u;l>$P_$*KTdQs^+b_K[FC#YYNKT4!BO4UsF%rNUelQ1R7BS8<2>+I,cllDG)c)U9t879"T*)KK7SoP^2Rg))CqVM:]LHbcD>4UH`OKY[glWKJCg%GYM_RKSImH3WME_jF[q82=`_%[:i?6_'DRp/=6`d+kCVKebGc4o>FHeDX*l''/]V$/'dotjs/;r!f0,j+osJV&X3th3J\oJ*bAm1FsQ,j#V!hh1)XGN5PJQ;_g+kW%@%dYFTQ#X5]f_XBG@,FhBJD'n2ZNIC9i86^I&A,QL'JEt8oM'd.Aqi^$Lgp6_;j7B\,iW<*pD;Q,^)2?/1>[)T0l.KO5f3U/)W2h%kOZ<+5._iTF$=;eiq\8SEY>YNq0]i%#+i`BO)0HNNJEXim[)Bn,O4AIFr%o>IMc3^mrB<aS+Gu'Z:r6De&]`*H5c%*H$1)t;9r!I%k:,nu1$O8`Vm-TFlY1a21IZrijYUl9S449jfV_T=*&_UT`YPF5N8N7)3,Jop@AGX:H5KT)mP$iI@AN;NH5`XNd,d(kA-_SnmM56R%_5*B)S46(=6]+4oV=HH8J3+asC@oJcMFA:EAQJ900mZp>@dGgBJ_m3n`ulT;[-,fr!6[f?r]Z54AK%k+<@'q>'c:CVE+_cI2D#qk%<e)_H#Tl"%L.\`i*=ZM'8OuORAJm>-C=G9i2\u0%_[uf)8o6g]]h]1;4$E;#o!^mf4iSqc(D0rmn@$X?;I'%e8ANnu@sHpB(_EDN%`m0p7mp.:^kn48]6a@,Y'16#Tr-r3Vi5?Qd,iLO<<YQ:R&Ab+f#*Y(M>RD\$J#T5E)2b;<bS#;A(f;iX4]pqq#pU(T2nV\&HgPgs%OEG,sn0=0M^bFh*,/82>C_TLS1!).*NL]N,bU[#$L9:o=V_iG%Y14dHI8.9s+_s[K#=:[FOi#NM.Quj?1*rk_=RN6k!L5"/VGWHg%FFZNIML&dFA)brM6q.MNal5%Z>Dud[U0/'WcE]j'`Y4#",qpL"PXn>YYn3)q"AhM.RRb@iC?]Mui0'jef[)ld%P_7QhA'"+Q(f3'%k$mDGJ-cuEJoIdl.6VZs6)kk+C4cm'V?93>,DfN]!snp<T%/fO5Be^r6N.a!;m9#7#pM/:Aq>mIjpj/(Wa_<V/4n;,U<dGF!?\ou%EN5#kku]Hr]9l`Z"$/M2E+(466PmL:A@=h`A#T^c)7/aM;i-V;YS*K0cS)J%&mUWs6E10*)YiKGd_D&.4,F&')C3!?q)q'?X-+@H%(t*QE'dd92R<6=*FX+Eg?Nhr8[m<>Yd1?lf?\$(WJF^B@P*-BsPYhnb"2rG<C^%RD_^uW<3D2^FIt:MU#W0_V%tN5^)?LY@mq[W2%!1+[u#gN9E,JLr6.j`$U2*b7Idu&,>eeSQt_&q@9J7RtrQFMN8/Q(ej!>8f@:edeN9+%!Z"(VU[K[e/D&W[I&+p[IeS/SBANc\E9%"9F\FP^o^HT#be7ECif^\7@<e4^/>27K@)MZBO4d/@EIL.d#P0C5M&AaUkAs4UmDa`>`Z`O9AIX:*"rF/&^B"2-o7^jMW<Z^"+lo%beb909b,'%AQ$NK&o'u4n@38p4Yr%biBH<*_]G+8Jum:K3(d0Li;u>@6c(X(;B22uS5Keab/]AZ__%r]dK8X+k/1Iun2JAS.g8G1%*N%m='Li3,P)9Fl$J5GQ8JW5Rj5?Hd72rn^)&('=D3/*0NjXD]pB1[`8KuB9N[c_l!9tge</=,0_6Yg=7I&2)@;3%>-tUL#i>To5%,U0UT[`]Rt`%-iE)e0oj%;Z*P1V"t`CbJf>WD?Jg%b^T]8Ps'#G9FLi&n$O]]J:`;R0XIO<QI@/lWF@"V>*QX<3CSZb4Mc)imo#f%`DccK8aT\AXXHgDTa_=YZ#\,<prRie#lES?`7geC0hp$s&JiuR'#a!e&iH,H?tWY^JppQ26ARd'V[*.(KHb8*&-4./Wdmg_/j"o1%jFo-HFGZV(:eFe#*1CJ60*r6eh[4H7f]WHqSaVqLJRkaT@NLXWBQ:5ucV;N?:0L&\EiUupZpcDe_?BP&;b]g)^*XTbr-*Yn;E:)_%9&,N^2-LA1gE$?X?jT0$F'G%ZUe=>MjH8-NPCZikOY0$nLJu`?ROHh-E.fJf!bFf(B./N@OX,Q&@1\@`.VV!hG?dHfl9dG76Mc;D%XS$0jjUYT$FQ4_U6m,B`h"88"XpgU+_FB#DYiClpWM&6^A/[SG#[ILnW(;FUn$.+8-upSq%kja1LDKOO8!;_Fi@IM:+CD%-GRA*"%D*BEiZ_bbmeZ;-hpJ%Fu-tJEUV#I0gp5ZIMZ(n<]W(XW+$QB8;2):JjG+_t>k4JbEK[>h'>"9_B6t7-A;RLnJj,nHV181X%s0rsq%d9<X?JkRa]&f;uj++!V"4t7Sa\PlEV_<d*2'P93JPE9fp.8eU!c#Rl9]G:N=;CItmb`n&Y0Q,I_`Ebn2O.Vnb'Tbp2)*6Dn.3*lm%NPZ$LT[9s$3tS,!].@J1Ulfle*K\,bBd9t,_i<#PFMk9F.!=cDVYGn?e<TjK&4lU/9Qs'-D?Bu\.D-@g>Pqf/7uIZG&kn&(#F^bT%;SnY<RA(6cShSQuLcgm?.e;f?j=8c.8rZ*#9/JB$M`1kJIRm[Z6>^5tr/=_[<8];3UoY:.DYrX_o6$&=_p;>bYmM)',rZ"//>iMf%?p=Y5p9MV(OISkT[VK9\kTbq0h,r/U(?99NelKlUH1SrB#uc5H-A)r%N*$pN=2o(2?NKj:38%?om^mJ(,UfVq2>,iD-/!W'on4dE%-s.%[.)W1+h1j[Eku3\Hep6DX[k2-@[ZahC&a@79%0.^L"S#lol9Y]l3l(&)'h=Vn`/d\gD64@-g0f11QE:L!?^r"]f`?u>OVoUX%@Gr;bF=dT(X][p"n>P8E8/O:KKiiBudRH[n]EA:/3H$BM:^NtsSa)jZ+rMu<THkGJPhha\PVKt3$dTjM1!MZjW`7]:)I8;g&cIo0%T_GDX63.Q93C$K4R-JLb'e)a$F<FVo$e@AY'2gb$-A>'.<=AjBFu"mZJ8j5>1Vp^,Vj_@L(W<nn&gSScWZ.1q"3HK%>ua)3kZZ98%=I$Fu\HbspBY$SWERqK;YStNFYS&T`fPlPKL(km<kmFa?aT+pSJq?%0e5M]4Otoj>m2WbH#tR8jJ]&J4e;L;&f5<gT#)-4rUr')a%-51BKU&%ibK6*NVDQap,@(UZLEqCgQf7NKuE#&\=!qH\,HS4T7hdE:/D/rmFGV_U92TZ!)6`dI>GQJUu89cM@f$ISM+,nY6V.)$D%(-,Ls+_H-X,(GS[)JlqfRflD#J4*gV'GOdlKB7f_U)9V]4'!6&BZTXnSA$VD+`eU4AU(0bW/DU@ia,0NJMSpP*[i@jFBu?S3XG;S%,["nm8An;?`K\o<57fO`LD[gp*Oismh"jaIo+T]A"gXO2'fIHYPIjYDY[)WU.51r7'_b!>Rtlk8XHAQ&0M#.HV(MmHIP>f/g;f]i%*?6#]O3`bjEoW=k4;dEQ2>LAfqE9og)C8#\'pk=;%ZnNB'kKaar7DPq\8I:<6[0=>9&oA7Qm_A1'Mfn&5SZRkUPI3%XNOh;VJ-+u%&16p_&m#Hs@N6c45]&biq1o]Ud/EG@EKol3KX:gB*KjW8HJF6c^VlT-`^(-Gr74.V1J&))_4&mL633BC!ed/ODL+?FaMtI)6Sb@\%VP*LQRbpqYRR0,mVSP*D`K88drK:F.*h"9Wb+^?;Z=`U$*Y'E\h!oj0#$aGR89#<;3t;7Er\kWIMjArQ;(4st@8_"U()NjmD$Z/&%\8kOBj,+_Y&*%&C?(NG=7C&`JdEb^kJ?/t`8:oV$g`'.Lm6E'G?r&7Q@9=OI\ZUK\4(k*CYg=/E(^2>sA0ri3=etdp:t61dRpqO1%5ui_,iJ^M$2?]crFoi4*8HR:;9R*ZR"sh:dHL$YG;ORYY\H#0VCo@GfR@PX*.A`?-^DB_KURKg@,_?O.ffu+?P`NVY*0ogm#lX\'%+Wmr'r]mCrZ!Sps]Ng;*#nLXM7^:j.>(jtm6/T-OJ(&tE)-dj3EQ5gI-^P4H!eN\.eLjB;PEGo-,dOeIHPEJL<q>O3<b"o]@4.st%'W7[9fX0GQ=`Oe09_<tGd,iZ8!61nJ2;'?kK2V!<'S/#m1/EX1<p;r+8B_^'mKs0N$YVL7Nm4T0i,"0<%)VHVnY>EJ8W#'7<@==E%la*?;U6t($KQG3g]Qb;1eHS6?k&I1)KZfP/oc8jOGEmaK*fSOikR&%qW&4f;YPHY#qDWtqd%.$:"]8&4D-o\aVbW(aie*28n:q<6%#KFQL_j""`-L5)DW_',?5TI010P.T:T#6d)>!mJD:K(jWMKV-X(mg!u-^[%:PI,9$O;t1=f,3jG'!85[`K./-C7Hiqks4IF.-c&.%(okpMIf)IkDUS'Yj;\?11irT:1_G83CV)iaK%@QQUU9a^%=-r,.\6(lX%<pY]7ks&;<!K7`@=<"X4]ft8FJsQ)_jY,"!hlcJ4c(h%F#Qi/GPp/7[_kEO#Ju.8ZnA9^'G&%U27mo1jd(XRjK15lh5lZ4c"T;tMYMsmT$^PR>$Ah'K3u>%^P<:cE'.Y0*!iH+.VF:^eQMje%7:K13&ip7;QGhGIAK4T/]:F4$3+dc%,Wnl5.PdRkaOa;#7)mD41f-jo>rMu,ZZ8#!P(?V4FLS;!X9KUhVUjrX"%8W]PVX%eb@"nC%'%O\F=:5n;ckiG:1(bA)iJW?t`!p8(P/O!/H5j@d(a^38al,>gX5t0.&ipgFNuJ=Q8GVuWRe=>']JX@ZP^AXTnERagqL(!a6fkQ7%6E5U[VlL%?m6dQs!fT\ME+^7-3ESK!6+RYhYORe3):n1%<7*ub\H<GgSE,>=3cAsDZ)\gE2<Ue0P.'6Jm7@?_DNZR,L8P`,3&_Rn%Na$OcPY%$/'K6LsFj]^0;*e&h#;JYEe5$;bM4M\j:!o$;g+lH,cltjsP51!eif#s3Kfb8t>.&'1j/p!$btCM,^lD#7Stfh=;ELh5%Xo%Xr<PN]DAL2sGlBV6.coB&L'(-:>'U)ldqa[3qRHKk6K0kaC]YaXgAF,qN-e5`+ZN'T\a``StrHC^XHQa-D\e%Q'2>.QU*dqUT%rSr:PW.3Gac4U#6T)H9@`r9BY0BFAs*6>Db$Re.8r7Yc_Zn@YhAcH_pdX--Y7@41pMU&]:PXV`Vp5]QeI9s&_pfH+@j_UZD%f8J`%Z%#_-@ElC$ee+:0RQMD[h[pcJQ1*WWR)?ppZ$0sU([d>p+GOEt6$n;DpNP!CrWdQ#hgrfGc_bUJNtBMTns0(_$iKbST981Z45PhH%[D;sT)(b)]c#RC6IAkce0^M.:qb\1RgMHU#p5efF05k6XnhDd^"rm,,cX)LQf/t[H_Ws;^(SF<).fINgHdX$*ci$]nU=keSh#EoC%c2AZ)\Go3.ZFRa)c,9K#B\^A?EZq:^j8Q"!_IAOsqh+N/;;L"LRoIgiXUea2r^IG$D5<r[NT7De4o7I*A,d#qp5]?S?ja$?Fen.T%6/AmI4uEK/N&tZ`Z[Z/[A^k/gN9[M#Z[^"mN;Yj%YlC'5rk&hd1j'\Dq[jP=`e14\LQK2=cb69nHINhX(\0A=&?.&-`&M03N(K`H%]@HTWZ+,[]70b.G0k+MrH^eiS7V>Q.)CT:iB)q37k.XJMa1q2E<g-nU@ELgNRKD22m=f:Q4Q;ckBf"7*L+[9Pkb:qsk6n_8d0NR*%C+E\)3nELgeKI_I!m5?4ieF!=f?bfKTqk!):H(g=^l0)cC1:rP0>?jW0n/fs&Y3<&!$9Y5isJAXG(`5&`ess":aur9#ln@hVCGIF%n;p6BN'pGj>pKE_2pS'XZ']iJn5;hHm8$]U;3h#nc'IYN,4CjA&LFO7*K*2ln$t]B2qGRt!nJc+[bEU""c!E7k!^DY)DBk+=/H[t%LUXYTc(:d'q-rftHV-d%o%I<_&pLA1f!*1PNIo+32q7_DOP)Rgn[X3i]<Z!oeNj(Mk`qb(TfGY)\u0AerZ2m(d/C/(>%Fc.SFo]4%?9ek%`t4La=9>8&E+@8NDhu-FMMr.)K4LBLI6-EX3AqI-Q2tNrZVEo3ba*[jT8ED^^Q=pd/dMUUHJN<o/W^5d#8Z]2!,)j"TeYg<%e#aeWW@\BRQI"02L"Aou+VJV5WeJf-#Xjot,o)]ej\6$&<!QMu9XV[6c74%g]!ernX(^;^+GsZ1iNEU1Tohs0DB+6s9"b';*9FM3%hhc$:+hVJQRZYrur<Ju(i[j2=VOW%G2fq2.p2G"oe^J!f.GUHSXR:Z!NduJuR9Ti*fX/TVBW(B[1t`Y,IihP],TPJZ;$SE31nsrZ%"`0W\Ge8LJg3jcs9AC:V[$U!'/I:>0:taYu_E&/EW4"l&=,2<iS5e?RVYq0\o!4[RBng2V6QJd[)0m$K-J%EH:XY#(l"Z8HYu8,`%p92<fhn4G,?J<?'cnqL;PD_GI4TJhR8+cQQPGTXbGo6jQ*q^5OR\tqhmbDhJn<kP\eq%Sc"gg+"^Y90NN28K>#A,(`\2j%JE9Rm=%Dkt1t2E$%`<=@0J"k2W+nq$U<\?EFs3'1_6K)8T5E+)4);!/'.*+Vnb,:7]>,jmn2S'kSn5BIO#bX"5Y>+c*:6l1TFr0g#%2b'd)%`R@+Fl3IPcFVF:GGr;&>@=,^Z"L8DgYr11d)Q,rUR\H<:"/S*)@cc`j6HB0Hk/=Fgb7^.l('tGZ&!*n7=a-GF"R2Z[`X8j;%3,0i%d815S'O*L%iU7gSR(P7D59RW('0V\e`j-oQi+]j\mJNs0LJaW-\CooJ2UEBoq1H1Fo\IVfl+)C&U`#3r&oJlueCg?,&<k]P0moP+%boluQOZ=4]p'6]&F?+gn0NMTNk7?N[-!ee<46(..'&gY4i=.p[pBf8!B8#\;!`0A().A5nl6)BP*;6=^81WgQMB0ejX2%"F2@V%_%n:BRb[n<,a4,?s9dKMfW$P`YV4mK-jP#fZ(UFML[:rM$+r)MG&W*%QkVQWV^V)dc02<$I;Q<f>X3)eX9L7]r%9b%<%@1N("U;=`-%Lh@r*2/JsLamK/M!p5L_ObLWhmi^"I/lW4$ZE_Q>p5_.,!3W<Jg'34R7P`jWa.R6G;@-2WVc#Ddb`\)6kK?-HSLYtXNHST!9VDeV%^9V:qPZ$-G]%e[urI&_f<K1P4q.L@!ElFcipmg_t(&+ROrS4o[=]5.RD61YsP*8N-BU:orkON/#E#!$Ll"uBE[EtaPAR4+[&=*pu%Jtt9oGt\h2LTkHK7rus_J<Ce`6&&/OiEY[G]g<W7iB]:/bYec:J>QRX+;&3_<DA]k-PR[9E(1@1EO;NjEr35`6>YJ!+@qCM,!7tZ%krpP3YfFSm15,%+Bq4B0PcLi_qq$C6*b])hq4^3l<]IC/K0;e[2[N@7j*K(l_S!2-LPeri?#Mg%e&VS]8\PYFKedkSLZI1>-P]:d%GLQY5N?Wto]cg1rp-GLgHl(6fjLh1]"QM'7d`a(CTpAmU5R:QA;'Ce#nkX!,PUDcP<"94#'bsV3T@2>-TGTn2-(HYYlRmTN14Z!A%&/jlL0m=,TRN;5$J0Z'F^D2XqDN*%@07%_NS=]$Eo`r>C,L%*4@0rD(T/AJaqW7i+$/fp4]_,?*`1.V:6j6^o7Om^FBsFA,RRr()%^;E]Obum=<H^$B8`f5lpgOAq.K0"DA6ViGg)H+M"Mu2jt#`Y.c67W7'Z'++FZhSMgRQ+<GOlg7Hi,-?>G-I/T4hRi%gu@8oVXRh5%/P>]YU-I\sW*33?Cn]qi`e0cY!K!k"'>RjgG9Z47r/h@;9C'ZK5R"CE5p:^_.J^S'&,A#c3GE.Nj+WVL+O,a7r[^B"MjB\'oT.ur%_IE3>5l.TN$17nG.dJ"BGRf6CLJ/cY0Z5+nH,]d^%G:cD7h(-<ZV)pi#+7)-r+eTL#Y/a5U)8f@n8h;sP4#Q?2S0a[h-?*H)frbt%><@_^kDQ__Jbd/0bZNqfDOl"^AjUEK)#s4<,Sk]jNH*RiUpoVEXD0IJ##\0$aW[7'ZYqt2I\VSW1BpM#o!:1,j9<ggDRARTd33`G%VY1u__ibe>`c!T&"]29IZ^Uu,G97r``!0g)ooq++h"RC,:HTae4`>5.Sf)nkl\SA0:>6Sh4K8X#ht$24'65)2`(hXg]f<$][iPTd%6/&TV\U`sE+H6O4Rq,>OTTPC0=D"1mgmRBfNbN("h7O?j>lCRNHI?+Q"ZqVN'\09e9%lR$;t2!uXt%OCk,Qj[BM`"d(48J?.Bd*6%_0]86Q79s/&mfla98&_LcWRGK>K487C)1mrU%`ZR=ul6.WaD00h_cM6OFo4NbloUA%n^,&C+Uk&Nqu>*2/:(>+m?(q1f\CFW1]."%@nNW]=_f;h-t@nV$q5FLSG/:M);:cT:<pYWK1[%F>,/!Hb.<regB$H6r`urmPTGChAX+KCeW$[6lVKm9Pn1#/&,"DB#Lt'?mP89s%l(,dn9%5@ETapl3^K%;;DcPr><KSKPg[NG+.mAQ[1EBmPDl"?9M3Uj_l$Na#h?Z_*jt.LU6>E`\!mP\Q=t,hD^?G3j5fGY>?mb00%g5dG!\<M=./NDCT/tDNlX/:]E?gDkPr*0&YW8!BMd1s>3`(-^c2YaE.5dZnRa]6^uU8Ejsqr[+\@N[cIV<?ZgT'R`m%4iDc8$'(f%h"4Q':Kp"lNhYbX9_u7j2bDD(:ue-)D<DC4;\972$L0T^^(Yr)R7G5W@KM;2[AIgAP1lm/.R=E8G0QOUm0?qo=!C8NhB/j@LdiVV%kMuut'`)oq"XOC)H-'!N2^M0SoX)a(s6B@E7SrY4cb?9YW9rDr%u]+?Sk;o/,-H]ii$T.!`-J^nYdL7Ne96*'*f"KbnNr_Dj&>!E%'9SZ<Vc.;?-Rc6`m2OE"!9RP;"7qbF[K$aq=clt'A-J<C&1o56HVe90Z=u]Vg.feZPcuK4/s1^mn2a,iTKJZt22%of:,Rn8q:1[a%Y#m#ELVo>o1ZYHS'mK?PSNPLY%h0Xi.L](e/sATD,tcLMET]rES:D*K05cg1%$k-p[3)A8"dn"6%3uW@:1"NKLPc1p6cF\X?N;Pg%c=PRpNd*,bq:J^fJ<jm.`^q?&D4X!'?dX"W56[G>"T'6JaCP%*P$ZJCD1Mk`'F2.,)q0rVp90l%BA6/]8j`$Uk@20ul;0dXXYdD*%nh/C=<TVrpm,BoLcQV&6Ej4RuEL:bXFt9`oZDZ)<f&KCh7e=h>[AU_Qm@gHg(2CmCasCejD<?H3WMhHR09ME5gR#dfM%sJAGiU.R%K@H<@DQA(NRkmJo5E"hqS1,I:mr!RfFf#-i+uYnQ"HZ+,*b^c5EMe!-S1,N6'*^=+K;A5t+r'4jRf[nt3ZZM8d_W_OYrAX#$fN:)%?$6RBS]iR.YL__aa43%rWl;F7B\s:VmCP/fUaSXu'</1`T$(j*!)pBWhs<QZLX23'%uKlE*o+=c?E0`]R@[4W4V^P?;puDl]ZUUE%\i76TYd21O=d2RFeT>^f&F"<)*Sm3Xn51u*nPQ![oCX%`]!hc9K>'JNR4RR!Ed!I;VnMC.^GiRc_iAG"lN@rM[o/4$ibOo3qC6VD%;OhaUbU&`#4%SD]T'dSC!ZaD%7W7FLb?Y98.h/9Ih/WQ;d"+g8mLF==QA=Q>0i3E!lIFL_i<4N`R!pSYF73-\DengcCDT%b:I6QC%Zc.cDOQK6A?H/[97\,lQb:^W`hFbC]8XDrH_"qGucLQbQnuqm813C*3&]t'>#1,H]JTG=*<O][IdXBJ\&.f<uKUCXL@+$N^\CK#&%DF/\6jP6YD:)u[L>-6-;LEWRH753"M^h,H0Ip^HmmdO2XDs9i!]M0Gu:\T0+*-jQk56%.jI>q`O[65`f3$5W/5fp&1M\*qcYb60g%<p+?&OcWnAD);p=j+Y.]9@UF\O!==+Q=o7^[b8]T]O:>1JR\X_d[H>c[jE[<i#[lTO_jT?0jn*IJs$p4Ua?'ZGo^M1&*@<bB71;t%,ACJp&):`IauQKRDU1CZ-^^r2_9R<%C(NMr*nm30#FahH(!A0XP7D`BAh^:VG.aSS^bJsU\8D(@V_pLF(]eKg42@lM^U5g9<^($j%h$JqHHMm2EC/?jm&34TXW.T;,Z17^4G8<A8Jl27r/DIPi@f"nB_l2a?T--i6V`O_J,61;ZZgDs\OL&OZ;#Tg,X7S)+[fYjg#eP/e%a4U$4`pHd[[tfUEhu*mSpHCDiC)3=*^H3Pea6o4gZT%#ja-od1m+p0FE[G!Z<knM^UhQ\te9)48A_E)f[R&#I(Ea!P;Wk5DhV",[%"0]2o*MCnHhi8UFNa"qrO?)/\(9OJAl6jg9BZG:0E//_q=kI)76ljagKh@`qSWITog[ji!h4H2Chi58Va]LWrpK&-tk>j2W`T4f.%j1BK6#Jrh!hte&PJs87&!5h35%VXL5/msgY@=ZdVEH4NKX\*&j]-n5coq1XZX=7rf#d>)un,Q'6Y"@s.U3o3=$T:j7TbEO#&-,?g%TDZ*i6865EG+8es7eRheB;=a_!UD2IA7YGhOmTuZru'l65^i3AK0ITeh#/5\NRi7/OJi1kqXjLUiPG1AVu_-Dil5+lXgo<,f:*F`%Go=)o#L`:s%j3jijFV7>FoeB-a7G/h?QJ^;0pOB.g-iQMAfm<GY@9QO#(I-*-flim:gGnH7.d`=79i&a42?&dQ*3X0OX(d)#PK9`%Z3NYI*q#P/\f6=igp(7"*%H%"rkV7D=UIhnE[@EE9d6>bM"[<;6Y7&0e!cpf1)XmGG"'dFR>!d63)SiSesCuM71+,MrWi)7.BFGK%D$Xo1$XGc[S()\O@8.`MG>RPF,S<!lOFpG=;^C0;Jg[>Yh#K7"A9eFiLO/*HXBd^:0.(7YB8\LfeEH/4H6cN2^^%+'qLSF8@^PkP%EWrta/?r>hFWp0\)OdUtaOAs*;g[#+!2Lfp=<<>4+7f1FpGh_;aY5qHg=V>QjoQmO,.^*OmfaFq:ubtM;5?!aAC3^e!*OC77^1Fr%"jAAbm31PK/`t2G]5/GI<&QbP9*T`U+2U;-)t=G6Xd*'$HmoAb-p&bF5(K)VLINk`Zo8RrTb'l_?6Rm9Pt)"rKXE5^'l8\u#:/s^%pC\$H-5n$"`t_]tPXlBYZFF.*PmL%HT2Q)''\Hq/N?\YddAlSrgpgs>_)]IFFs+GJrN,MP!UU")L*RRdBYFY7g$NB=GVl2(@(M;L%+W]EJ&d8UJ!>5hWO;a5gbO4&oNNftoMQuFF:WON0on;(A&0;;MMd;&\]V4XREWj-1+SLoQ4Cl?GeTm.>HbWjb)1gi8+@r]@?hZT*%!g&,(4UA5fOl*2jUku,r9s@T!!Z;410A!nBrc1Ge&f(d5QYT1P/[]r,,ctnAD`_!t$3!iHCl_ZCF,5]D6BJf`EEG_,D@FI7m!kjF%od9^ES@+7.ILL,"1&\101:Zqc?EKXgiOk7lP=^G'pG*J2a$e4Q*_9B4nMR3)3#:g3,Z;&D++N<:>k:Vb^Foj%;BZ%sc?33RC9`a;%>*F`D.EYQ@3#G5NE6Kl)%gT@6Fd)uO^aran$S1mHiS)<eeLRM%Gir0R\5*`opGhnUG,r:R<_L=\XOj.nOYoPY.Nf^tfrZ43I&+V=%VT>3V*pONtj?U(2J/h[!dca0i,$;,,5kYaQ-)eB4N,rdL:,4:83=(m!jjZ>MfeD^q;jC,P"j]F*RZ^`[q%=_OPsrf'B\sj^AUt*p%-rMr(F,@C`)B1CYjdE*ha5FZL.Yr2G9Ee8Ps*+jDIk2^VGE2V@aIr^3@:O@N]gVc>P.$/:l?+lucD8\6098kdr&&.NMASHQ`qDCS%2",G^21ucVRu"`m@0g]E`Z"u^<^Mba4]`19mF-P8*X,ateQpBX:.8F^=M->!-;lC^=*i6(dI'R46$F/S]M\A9)-)T:$6h+n84!S=%f+^4;Jl!BVlfeHN.*`+F:k?`hYW=,G!>Q/C8J[CUcB?VOQ<o]n"8t!84X-@\[%d`'3-]gdDB^oZ2Vor>]*YmB0Mt!u2l)`CRNj9/%7>XMabj\DS6*_:KTVW,D-Oa6'(2K('%uBQ`+Cts-<s5&gG91d9_17]Oj9c(").Bl41S>>#\e"uQn4&h8E2M;"2M%Q\F6sc!*75aX%Na,GS29+slCuqnHY8%K]E%`5naY.];_KoFA%H,&?l]kRLhVfqQhDgY=S>/f[_g7mrOb>"e9K4F`lGl\(I'D!TgL/k.84m3:Atc"Q%3d-g6;*9[@_:J%FcIa`@Bj[*TEpS+e:3#n@p*7^KXrg,(!t(#c,p;!O3&Jbo%Dnko0"#?0UaVK)Z(b66/h]Y"?G,LGLDeIBSj9t\%UA&:g,@#o-^1=\?@NIm?7=%\f@&?J>7.c;_2WHcC"?NQ!NamCRi([r[LO+W+9TMGI?e3EpHGj4UG863.O+<[9oIjq^)U0ZV*]4"!%eg9G05X;>hZNXl>LkTWD7\C^'4=YoWkG=C@fN$X;0n0]SAo^-aPrd:QVt16dV6HDj]*2i\?_pY6hdb0:</Q4POmV;.HoJBDm[=R*%B"[4T-mH1-"><PGMDNPH_hKi?Qt`-_$dfoW@'-:B@/gR,2a97r^]6AI5@$,\m*'cX!f<79@DJ`6^e:LH5I5aZEc$E`CO2'eP.i&V%&3`9^Wc_%E*6TK#K0b:0"gZ4L8i$/m;T0["UU?m+H9-+g_[p`,oZ(nR4d+l,']M"^1.1I,L;[+20Fk=n%,NF%s#5V56kmM^Iba`!%oY*rbroIc6&Zi3K6]Tc.mm&u/(J#$"43uJu4nt4,En>@s;<PqM%<CkWAEP#iZ1>+<6I.gKTS/ol&Zif0*U\PeU!VCn/dEKVLgo@A%Yd-:mI8kCZ!Q@U5h6A'sEN5]SBZjaa8<n?/68=o!L,i4[VD//!3g^u*P;&YArR?e5Ll.d>-$sL)#0)U/N=7?d4YBnGM`.K3o3e=S%%rEhc!tV0tTH5RJKqdlsGppfcaTdc&Z/JBefPYWoNuEr>;jH/_kM\)\=eTU)jrMn@_J.>`7I"Bma.anjD*EZZer-B9T+2.3cHa4b%7NuRgEA'\'OVtKP%aMAOrNu);PDL<T_NqQjl@i*?"?0l>UHWa.+h,Xp*_9@>5<qII\o/B]Fk+XkhS[J)LL(B$Z>([C57/FFbn.lA%3gKXPlrm>_bW-SdV%hI#e6Sl,[thcOFY,Q9W60\brT=oBQ!gN70jgme]P5Tj;2/F9bYk55;mc>ehSZ'Nk:SiumJIGW6uAI-+%%;T%oOLAp=DN";.neiG^Bs8F0j\2k0^Z@>3V6EESu`:RSFnC8Od!e,^&DF5'H??M(H,be6H+N$%JZ+6]=Or/koRu4k^.Y$-#HYd$.=SB%d/)AV=It;4d7?-""'&$(Y8$NuR.VOt&6\oj"P?%+,aL4rp=cL-PikMW]V2g^7-HP#7,<OU[5G>dRk+ce4%60C_dbp*K;>;gNal>6%6#/(;3=)%\lOVJsAAWmGZ&dHXW!P)1n@9k7$s2"fkh/6W@He,@`aqtU1"-js)qS!DBS_A-$)7WA%95YB2[sPppgE#W6C1ar4Y"n7%hO9\,P2BY)0f7);;`,/UcrfNp$]!N72QY=>)tRV\,0!@6A>Lq9TP[-4F@sC[];!QCp:\n0Zk+X[MnhLfaWNOLD+l!Lrt&49$O6(S%%RJP0e)P@8FD6un&pkV0/4u/SS6BRn-0b;AmI8hcK0WF/S-oI2biD#S@<R@#EI`\11jXM[F!1'Sck@8(c\EkV'`&;<<7F8cW-^5X%AQ[Pf7Y%:,,pF@5;jFOt.BbmC9^[M+F?[R_7r"&6.bfPTh4@`ESHFaBje<OY!%1r]Bn1FO!0m*kD9WY"bl0bNgF^-E)K?e'b?[Hp%pAD0\.(\$d(U+I"(/mC0KNe$[)SLm$%iU1D^pA\D0@au*=ri:cN(aR_QX,9BZU?.nHAL+%P-40Q#E,rbmCYer'C4ES;B&E>S4'h:%THUbs5i=45(`]hJ<V7VR8YO2VBQ@/q7"pOC4LQA&!l@(bYg6@-"'M^S7_K2^,EZ8HPHs1.V+Mcf[B%pm&YB@aGa"g]=>'phe=Kc^%ji8ero9Ijo70oBf#f9fXKlYaujUK;d7M2iJXq%BcM1bD\8c]_>4*62;e$I$eD!:DsFaIFTG-M6`LcMAe"3kO'>u\0):nS_<)#`+g%Bbgeu`\EcP/d$6"39W=R4D9>>e3EF`!T'hViuFm?3icL'Vu&/Pgm?ppZn#?)nRqXQH,IA*Ae;C&6Z?2Sh%>?r[b&BIk-_.hY$g62%9j=^g)2<q9/a/6ma(=%/I.^Z&khIQr'<_RSGtu%_ljI-Kl.'X%#"m>.G'fG);BXsc9umZJToQig*_KJ'd=G&%G+_FNLcVRP/jhQE%MV?(AT1R7jXb*Ga.;o@P.,H+<."l(aie&RDS&!69o-<I.&nSQQ+VY;iRs%ZHd,TQJkf/j(.CGd6=P8)!L(-$^n\5P!A[n[I#l#@9%N1(YCO<eg'(NC'BH$Pg>b40gQ%s51_"55B`0&YS\&*][\CLG9pP3GQI`spnngkQ$PN(j&U@KZf)2kH8nOgLAf-5Nh4@+m4WQmcKk%Z.])qP^tVR5S`U7L"MmBJ*p_AAJAGkog/K[89/L0[?>kE)BI@?[lUdQ83gEQi]5fd3+1QrcQ+%IZIBLGk_[QT`QRGaTs5n()>Yp0%OO?KX4N`:!bopqtV3DM-ZmHsW1Q/4X=HX=Z8k\8%5;(OPA"hP"]EO:^)D$rd/oQn531pUfKkM[;!3Eu1^'kD/)AsfU0iCqmj+>gN%_e4NBZ6u,@*b87V\LGNpf+O$dm+Z`o_H9aZLeI87\+=ed21OF7TR(^O60sT=H(4C9@1.^PAM`gF:s/MP'lb"k7".ZFD%ig-)bKme%Y;&jT+:W&(;hFEE1=a3H4fH2BJBV<&>DF]52(&dW6ffJj3GTRA_0P7k2[].l1cUO%XUI9N%hC"dWdLb+*K5UTk;B70LiBKI?-jVX%]8kko</kFT5!KHm8h%%VmduV+R(9&@Lg+VY7S/5$$$4[u6/JK][n7MZ6D+l)!"Zs$W"h>#((?Q3/(C:5Bes+O>$jE@ISCrbS;T,$%0tse018KX.eELEN;!K#S)`:>;96t9AP+in+gUT>?)!dPQfEKe\CG:C#hAg1Ih)LW?%4@=9d2*i$7<Q\o`h6u;0h!;ZS=Riq?&G^n%>dJcnOif!*!m"8?^!fFY303!9l^Q*A>-L_/]cK*aogsI#,68ln4"@k:"`sX;O(`du_!Qn(1p_7(F"'cIDNIhYX_QTl&n,?UW<mD;%["kY<:)6/OE,>T68grf$27#+^Oqj:p*Bsk"7-W6&e*s+DqW,M0)o^p;IM%RZ4WAkfK3O<XV2.70^66Og<XfH%f54-?ojoj&bMX-7%AlQrFQJ*$(.@Zg\K48Bh0tsE@qI?5BNI&&/![m;YGAS>,TdSHRrJX+bC`dt<BJslBC+j6p&dL2[[dsJhh0a@JZ[2$rd>*fj;)dno%M-B^;K]$o0/:D*oSeY)EW#7_JXK5/F&#p<.$>F5$UdZJu'+4D'7u0dal@i]0dVMlX09h7A$cPVoh.Xe5;7\Sfr$T0Sldf?#7%MU2%L!mIsb2=9n'L8cZ@8X+V$HZ^HZ!JUH664EAZ!K_&RtUY-J\6N57*;&K<`Hbtaq*6\`G2:Gi]'9(95,O91e78DYEr*o)&Mi75gCD4%6&f;ibfD^-@VdM:8N:`FX:<RQHIqM'@2jgK9``=O'^8S^[5Rc7<me3VN+s,uMY.PLdKs>N);pX']F=,\D5K%h=C+R8F7'[Ujr2/&%2bRX_4g\^$*I*f5&#uA@=/8[kabMT+V/(\(fiG$K25[mQ"cdmCTWs,BMQG7[bGtl#V4;le2(_E4kZh&/cQW"o+"^C5oB,2jBfJLh%[dJVlRK:dK/4^Aqr=lP9nn$6Kc**IK7^(9)Y*UWme2>b^V&K):+D4CZ[%/MH0I1#=f?sgc[rS-]Ws^3.$6e6MU<AO#U"A>;ng^$M%;N.2K3QQF[HVRc6R'J4&oS5+_X$U$_@-/V@<U>7]WZ$mt1#`#(0`\4iUV.]1KVjaW8/["f>i(?I#cV&]#7'We)$`4VGG+?PH%i6g%VueKWZTRV"="OXF9=qG7Y;A$qA;">p=\kkNPhJgWSAM3SX20EXZrj/@dO:\S]31+-1YTmp?d9D?edh^10Zo.H9RoQ+fkA2_7;<6H%PiePq\eV,f21:R<,g4/hJ%<W1>d-SXHW_A2aT!Q?;ZpRo&$_AfGSq$,^^TNO<u2*o-)s-)d$Q1>5<#`JAKQnun]6`WnY!nFi5aDP%pu%OZ5,I(j`o']pT($_WrW?+*I-!_VoafS':PO[/rYi)M]=7PHa``@!<d%;+^^?.J!E!5T9rW8]^k>=6;I&g.a[4D!WCg!pH4(1Y%>LFgj%$7boX2L'^!>;"2+5N0-lHHt;$4`;Q!&V;J-jtph24/3FM^sHNS(8[mN3f15rG0umEDK!Z.Z%inbCo\gP.biTeSi>>eSZ>R%>92HiDr^-1*_h]9&H,s6?Ion;D;+TSRe?_QIbi[WoFfpS;/4fp;=63PIH*dNcRlh5h/AKW<6mn.DbAWK-bMgq0b=W?;=trnRlajq%G+6L#PX?b$,#+O,/lM:LN/^Oh=Y"K8Xj)W!?rEM?2Y`$$d\5eK_eoY`*M>%(,!@3rOO=$)=!M+:(IJ_&IP68iNA\V$F>4'4jkrMq%Kp!^Na]Y#3*q>`AH%7HX:sBJtZqPC7H@5+a\r3'jqTm\%#MMUqJ`J"F`.*6=Fu8O(mB:P0*>qqd_a/I2j3d[-mHE+:qqS1WaPTPr%EgO+J@"+tr+A0D9d7<VFFtChehrS[mApJTDQ_W\_&(e:bb$qFN/pG[Qb7Eh)EX1<pF'c,>'GCMe1HDnQ*PcX^o%pg=gFbo/&0&aI%aik2JH.8uu`,DQ3*/gd"0?:@sj&M-,Cfp,dfJ_8t\::Bl%!YLd!iGK/q@rdHN/Igj/=5nn-:^@jp0<^Hes>#Af-\VGW!>@Bq+D@`%9obCedXTKsj:8PdI*n84V9U*@Z8_U4<PBjEL'=ong/[R&F-Si6Y&Z)gXT%(r4&slr2gIoT9toEXmK;f&J,,f+-6LeLGI%#4j=7q^%/Ep!.`j2VMUp=eGcp;s%9mYL.6l!>R+OE1[8BTun)DLqFGRo,J8A<fS,7id^X6#8\m=Vop[DHSq8/k*-Z1'81GVhWAqZn4.<8?1f%.NVKk0qLMc\tdk"Qu.J1)g&IH`#G&WY:5ehe01"bOuI*h>h#.$lLI7f,J<S4XPhd6(:A]nH\RK>\rJsV";;C-MSJQa/BtS-`^(CI%HL_sn@Bitp5%de3l.#9^>Ma'ba!pXaa'JT^PqeI,kH#>cm84Tf@&/=$*n``C*%0:t7khhdPb`7l2f+a9@h&=KrrT's7=Jt(b`!)S%XY-b`a":`Qj>F;*35?$V3De3Thh];`75L`Q06Sj]qh,47Nj.a,jM3]HG&)WC$r7p4,<oaZ7ecH^97L&][oeO],eQ8HhS!5J_bcuI%@M@C+rfuO.c7ZbL6_,=c'D]XXB(MQn6h55'+j-MXFdHi?E'VAf</JVX/<XJF]c4diXH8$3\VCr'Pl'dAXS+1;O@tPt`p?V$(l9lP%;M3hGJ$93((g!U`.Plk:4:'"X9/L@rbKAdI1SRJ47<qkuSAQ_t"s/;Hq+5]02T,[P@Va^@QC<d6D\k+EJEpffUoqfTK[GXepc1<.%]6=X+R+(%@oSOC2X19+510?NL`HiC,f0W5-f()Y"H:Lkk=MZ51GYg%ceh$7/,1s8beYB%]+fk7O_S[:;[\XLb2-kgN!L8h.g<Q.`%`H&jr+@%e^&U-rci7,V+L4c=:Bh-Z)IIt<aVJaK'S>o"JaKH^&XBg6Q*VW?Mn]RJ#e_MV/!0S#Yj:D0Wk&_U=UU+I.\"aQ"mBWZ0%fc_%7Zg6]70o`3P-V<8NbEu\REcWZV/]<^uDUDmgYu83K0qj,Re7Zd5+`0kMAks=p.X$'"LX6]*<2'IUERo[fH0p6.j>5$JGnLoW%i^FIr^[*4c7;aQSY"hJ`GVG@46/`Q)>FQUiWpXjd:F8Cg8u[iD=M<Qa\6r^r1bKL3Q^Zct[j<Wo\=ZDt,PVPOOR$r";A=T[72je?%bPME[hX+@O^.@:1an8qR2cu*PGUXit)V"6Ekl/#]r"4?;43D\<aYm,\RTbKspprdq9i\8gB3]qJ=sF<'_DR9m]6_(lBcX1%)T1'l%(q0#?<;'$37B96WF-Pa_-BF#rP#<kW)V.HEK&&4S%Vo\le8g$?5b=d_C(n=A2!Z<]<4)ktX:dA6>/7Zt<4%28q$:e"nn%?fh;VcY%eUrafg>p?uPg)(/FN,U2;[a99&`Ra@H=MP+\NM'm3?reW5B]0L'RR>E_s2-<GdM\R$q"`+2$BZUk7l"#JK^<AY%s9A<)?5k`Z=r3%?s]s4W::(C.Alg;KM:_\Hrd8<e"fU!""#5>&9]I4H.=Wk^2"pg8rjgk?EBJU9o"_>0aR;ek@f$^*D9T&JiU_"E1EPs(3b"W9(cR^%e&,^^m#2!haIt"_JLi1ZJ!7tr9It_e#6ht;b8R9%B?3B\qNN(`JL1rT;1i+hMd$bG/'$/)jmGu]2nCtQ#?mX7Do4t1dfiRX1h_<(%XY[1,D7B_CUHE'as+&,B3p=N8H;HIGr0g[ThQf_rC<H'%$mK/u`F%mp9]Kqrq,WE[7@@(sVk#eOeG9U&KIVR)3LY#0(R^&%S?2lF%cB`TuRotHE-a=TV[QUSSKIX@6?fGo#ibP'dK6Ecea!AqG2.">5`7_lqV:R]]5/L'bd;.[b"Z6$b6$`>rUfKFs#39FYI98#*%"CdL%3uG5jjl.0^F@f<IK.diOnVXs_4]Z`ZU1Le_*pY@hklZrB^ej<2mkG*g^\eL4"6=he.02QA2LH"Nqj28.5deh:G8.fA%.>OmX]^=+%&R%.K.6+`%eNl^.gYff#D\l6XYOdXRIIL1S#^OoQJ6GM9W*]P4qkpE#=,?.nohe`(:ka!_4kZfA/?UG8O\G^_:!+Zhq,Y8?IrrMD%OMn"7UT.ZH[Up,SWdYrqh!3Lbe$B#Z1A0u'2'R6b%FWR&^rK+eW^hA3UPq6+#ok[j%0E2XAoduVXaYq7FYgkt\7V'Mj/jFc^fd=2%:;g.*]js%&1/=>OQdoeV%XRf"YrG#?]&Z-\/bSm^!DTaZ0<etR9I+4k_F0qbZg&WIU:V#D]3Pf'>TkQ2%#NV7)V(Y!QYM>:Aq1<r%gq,Z[XUufE:6gU`%o0e6>]`4u'Rfaf:ge2qPU%ctE(bIu'T8i`Q\SDIUf)MPVark1/M75oHTe>%g3N-^`>a@SVQSTt!8B^33f[2c%"W=9IdVHI,V%%D;0ZW:s\jPJA.Ikef'Ujl6IdgAq]6^L+/NU"Z\0sB>e7[<bZQeeZ3^]^e&4j%SUJV`JfHsCLkSYkH`uV,@a4iD3%Oa)E+o4$S"6R<\gn+A8S</I(4N4_mA9\C9shRsUIQ%HW7<_t/G9;.jplp+ag7VXneacp8:)B>Uu[YIgHB%c-Z.^L0BR-/YS:-2)s%dF#W`W\]dSl=rbr]gI*2Zm%_XQI]8E2$4uI;Q",7_8^;'gNc0)lWF9kHLYXI1Y2ABQ3`agB8PEJg0#&8dp\@7XWGlbo_9>G4e-^M%(@[K_pZ;Nlm+9=j(m+qi%hq'!]3lt\2?u>4bihPsX]iBdj9@AUji!b+ZDEUr,7+,aTND9$-m*R^G\H:!47H?+4K-joTi&Fs4j6Yp%\P@If7iY0W8l#HQn:cXK>]P>h>VM:1jV`I4bW[K\e*&tsI\a@BjA^FDkW+pn&^1HrP)ldW582`+rYil\co@X]LSE2F>Ohc^LN#m^%q#-b3VSWun+Yh$l,XuHPW]PH=$Vq6hU:OVq<=eS&Bf*Hd,rTs1-rkh.NSpcC_8a=.-C8=)#UQH,A\X6Qe#$XBE&T'(<hY'Y*Y2sK%X$!DTUFHN&pJW9gOXFB[V#'6DN2l*+C!W`8&WZCe48$EoT_MW::/n1:X>b]-KCoT/cQVt-6r-c9$1BQ$N*0mhRMV\*E6#q17"r:(%kmBolLmN?T4rBk+G8N%,`iGRFP?8d`^#GP`gm&#PW"(jVF[1$>hCbHNkuW\'$q"!#o/oVj_[qh")O*4[;#9H_%ad6?5$3]m,a:7m%]N)9?/YZWL2QU5&&gsB64qpUfZ/*2_B02(2d$]f`p>[trfb:[r5[PZD>5"U+RsA+fh4+nm#,+I720*I,%#RN?WlL$2:mS@JN-?;p%9FoGV"bQu;0JDH_r-cfUDHLl!(BL<3CGG!,H\dlZ(Q1<d;)4h-EU)-^0.oJ5I3jX!nFGk2bBZ7RF\Mae&L3bt^:m#DCCR>`h;eEX%BGV\0TOT)S1g4OR]kOfn+rFnI]K$kEf<&AX@iu'=mchSS@/:o3j9%+)coKVA("*V3T7)AO&!nQ"DqD9oRtX*[(sZLhWM%l(=\*!T%XClHU@-TA2(4\5pF8+qSq6l'4XPZh8dMh$jZO$6@Ef\"Vf(D;_[f2/kj$]RR+1bPKh`+0WI/o]<VonEU5mrE,D'/_S6pPqL5.bo.%57#a3Y7S,?l_CKIj!D$([Il/S^<lXdM4WjG*D7"aV-*JeU[80MFRF&YcrAW!CAW[[e(<"@rA[nQ9BE[G0'3WK*G;DX2,!]+^`CF7%hRf>aUX3<+&H!NFDUE"3-&RO;k@h^f4eETA8%#XeDObhRhH:X9lB]QU5`7m8LQ5Mc4=2CQC:KRl@GA=1gLV@1?[>a6MJ$rqg2pK\%GVWL["a%b?D9Y.6U.Qio@*4>VMUL]X:df5f@&N&ODP9?Y#a/._4m*J2Li18#0d_R^.sF@X#V,Jb'6:B&FBgqroZ/TETs4m1bXCK>%Njcq"4JgFU#Je#P&F&uLKN].aUF[*-.\ZG&*Y9E!KskG@=p0SF;$YkD=]&$*p15JbH)X&ZY(St,!cKi*8Bo7"TUC2?IPM9/F[FS]%1al)WOBpV[@n#*s%CVoJ)A<[Hjs=rf&=KO:5kZTE+AAeig&Qp0D>m#\Vu$bImXUbij<0G5I!feAYK:Zqa0a@Ok[_([(XQ^#$R@BA%8c,+V\[!TOKu0:[L4F!?Ht's]K1oHa8\<)iBar=]9CO5DdGINB12_)kn_Ne?EfjY.PLW_KENM*6ke+kleC7O.jGl:_33=C:hms2S%>1BO,G1<JnSM]:j]CjH"[PWP=hQ;#_*5;a!]#@:/1sr1cdG),c_gPgVa']RqBA$5$(Ri5U,l21=Ef-QZ+MeP8??o#lXQ0b%T\Gm?%I/fq>4]qH"6">W)PbWCGo7@*+gM<%h&L9%<%<L0[[0cCTl%+j;nWL\-!jM(Gp[Z7mH;J*H#<N;gT0L1VY[RA8XA<_gDB-OhKsDuf%e0@'=e:SZ]MB<cGA(o>+lt\$J[8,4#HeV+ZZ8:orJju<Fnu9[12,KB=NC2q,cD]3CAlW$1>jkc[Yr%.Y^W&R\";LG=^gXWfR:LOe%Qu^Q`;o[MK]fd)fOtik]oPG7%C#8'GCeSo2X!^i/*!V4@<,r`XpgPfNQ/s3HR!XubV+*+"W)Y?DiPD8V'XMJ5Nb%1M7M=cR/P1D.%BH@DpF8N[pUI*%*/IoT3=%&O8HOq/.UskgEpPpYTkf,`WM+mC\?F"&GULpX4$PXR'@bu4gWL!=^D;]SZl&FU<7>"!2(QT(cM]@n4%2la2,BVH"`eheua'_PVQgd4(\OD4Fgb2.'$LqEJ/`3^%RZ'YO8rA3(SY^8n^[?qC^DJ5@JEr\2@c.7O.1&_8K%!:BU`5TQ5V=QGP%AjNcBcr0prY<*Os,;0&"X4/?gTU>>X"ClVL+:Y][\JXq0GY5#+BXi&U#1#C:",hTu&r:=*1:+7OhC\2/IfW/]BlWk<V4G5?=V2p'%m+B0M2=$bA]Q?W<BG5!'$?6iUp>"E]*?NpC_]I=kAc.u7mPH<9*I*so!\2U2_TB75aY&Rj`sf]@b-Yc[RBi]/_DWX<MTRpR<@_1]%X!M_GAiB)nDTjUF,'8PC=el<koOpW(eE2HH]F<n_#E0m&:Bn%)ToK845ca]T.kSU5C#G\E>@1f6'TK-4[gnCUeX?`[>-j[N[:KNm%eYI(N/ELo'XGWdneFO$G2='\*X8-5TT0B.6iU+g4n,:dDf,oJ7(I,Y4kW_<0k^sE6hL"_[Ie8g7s5B^prUf7pIWY=J?iT?I5J7$D%07NH7hu)[s+9$$RbPb4#qXE+Oq;k*ghZ*HPr:3(&X@I+%HgcCU>@5#>J"*<iO8~>%AI9_PrivateDataEnd